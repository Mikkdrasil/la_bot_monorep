# ToDo later: user_callback["action"] == "search_follow_mode" –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ "sfmw", "sfmb"

"""receives telegram messages from users, acts accordingly and sends back the reply"""

import asyncio
import datetime
import json
import logging
import re
import urllib.parse
import urllib.request
from typing import Any, List, Optional, Tuple, Union

import requests
from flask import Request
from psycopg2.extensions import cursor
from telegram import (
    Bot,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import Application, ContextTypes

from _dependencies.commons import (
    Topics,
    get_app_config,
    publish_to_pubsub,
    setup_google_logging,
    sql_connect_by_psycopg2,
)
from _dependencies.misc import (
    age_writer,
    notify_admin,
    process_sending_message_async,
    time_counter_since_search_start,
)

from ._utils.buttons import (
    AllButtons,
    b_back_to_start,
    b_fed_dist_pick_other,
    c_start,
    dict_of_fed_dist,
    full_buttons_dict,
    keyboard_fed_dist_set,
    search_button_row_ikb,
    full_dict_of_regions,
)
from ._utils.database import (
    add_user_sys_role,
    check_if_new_user,
    check_onboarding_step,
    compose_msg_on_all_last_searches,
    compose_msg_on_user_setting_fullness,
    compose_user_preferences_message,
    delete_last_user_inline_dialogue,
    delete_user_coordinates,
    delete_user_sys_role,
    distance_to_search,
    generate_yandex_maps_place_link,
    get_last_bot_msg,
    get_last_user_inline_dialogue,
    get_search_follow_mode,
    get_user_reg_folders_preferences,
    get_user_role,
    save_bot_reply_to_user,
    save_last_user_inline_dialogue,
    save_new_user,
    save_preference,
    save_user_coordinates,
    save_user_message_to_bot,
    save_user_pref_role,
    save_user_pref_topic_type,
    save_user_pref_urgency,
    set_search_follow_mode,
    show_user_coordinates,
    update_and_download_list_of_regions,
)
from ._utils.schemas import SearchSummary
from ._utils.services import (
    compose_msg_on_all_last_searches_ikb,
    make_api_call,
    manage_age,
    manage_if_moscow,
    manage_linking_to_forum,
    manage_radius,
    manage_search_follow_mode,
    manage_search_whiteness,
    manage_topic_type,
    process_block_unblock_user,
    process_response_of_api_call,
    save_onboarding_step,
)

setup_google_logging()

# To get rid of telegram "Retrying" Warning logs, which are shown in GCP Log Explorer as Errors.
# Important ‚Äì these are not errors, but jest informational warnings that there were retries, that's why we exclude them
logging.getLogger('telegram.vendor.ptb_urllib3.urllib3').setLevel(logging.ERROR)
logger = logging.getLogger(__name__)


c_view_act_searches = '/view_act_searches'
c_view_latest_searches = '/view_latest_searches'
c_settings = '/settings'
c_other = '/other'
c_map = '/map'

b_role_iam_la = '—è —Å–æ—Å—Ç–æ—é –≤ –õ–∏–∑–∞–ê–ª–µ—Ä—Ç'
b_role_want_to_be_la = '—è —Ö–æ—á—É –ø–æ–º–æ–≥–∞—Ç—å –õ–∏–∑–∞–ê–ª–µ—Ä—Ç'
b_role_looking_for_person = '—è –∏—â—É —á–µ–ª–æ–≤–µ–∫–∞'
b_role_other = '—É –º–µ–Ω—è –¥—Ä—É–≥–∞—è –∑–∞–¥–∞—á–∞'
b_role_secret = '–Ω–µ —Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å'

b_orders_done = '–¥–∞, –∑–∞—è–≤–∫–∏ –ø–æ–¥–∞–Ω—ã'
b_orders_tbd = '–Ω–µ—Ç, –Ω–æ —è —Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å'

# TODO - WIP: FORUM
b_forum_check_nickname = '—É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π nickname —Å —Ñ–æ—Ä—É–º–∞'  # noqa
b_forum_dont_have = '—É –º–µ–Ω—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ —Ñ–æ—Ä—É–º–µ –õ–ê'  # noqa
b_forum_dont_want = '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å / –Ω–µ —Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å'  # noqa
# TODO ^^^

b_pref_urgency_highest = '—Å–∞–º—ã–º –ø–µ—Ä–≤—ã–º (<2 –º–∏–Ω—É—Ç—ã)'
b_pref_urgency_high = '–ø–æ—Ä–∞–Ω—å—à–µ (<5 –º–∏–Ω—É—Ç)'
b_pref_urgency_medium = '–º–æ–≥—É –∂–¥–∞—Ç—å (<10 –º–∏–Ω—É—Ç)'
b_pref_urgency_low = '–Ω–µ —Å–∏–ª—å–Ω–æ –≤–∞–∂–Ω–æ (>10 –º–∏–Ω—É—Ç)'

b_yes_its_me = '–¥–∞, —ç—Ç–æ —è'
b_no_its_not_me = '–Ω–µ—Ç, —ç—Ç–æ –Ω–µ —è'

b_view_act_searches = '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–∏—Å–∫–∏'
b_settings = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç'
b_other = '–¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'
b_map = 'üî•–ö–∞—Ä—Ç–∞ –ü–æ–∏—Å–∫–æ–≤ üî•'
keyboard_main = [[b_map], [b_view_act_searches], [b_settings], [b_other]]
reply_markup_main = ReplyKeyboardMarkup(keyboard_main, resize_keyboard=True)

# Settings menu
b_set_pref_notif_type = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
b_set_pref_coords = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"'
b_set_pref_radius = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å'
b_set_pref_age = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ë–í–ü'
b_set_pref_urgency = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'  # <-- TODO: likely to be removed as redundant
b_set_pref_role = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à—É —Ä–æ–ª—å'  # <-- TODO # noqa
b_set_forum_nick = '—Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –±–æ—Ç–∞ –∏ —Ñ–æ—Ä—É–º–∞'
b_change_forum_nick = '–∏–∑–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Ñ–æ—Ä—É–º–∞'  # noqa
b_set_topic_type = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏–¥ –ø–æ–∏—Å–∫–æ–≤'

# Settings - notifications
b_act_all = '–≤–∫–ª—é—á–∏—Ç—å: –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
b_act_new_search = '–≤–∫–ª—é—á–∏—Ç—å: –æ –Ω–æ–≤—ã—Ö –ø–æ–∏—Å–∫–∞—Ö'
b_act_stat_change = '–≤–∫–ª—é—á–∏—Ç—å: –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–æ–≤'
b_act_all_comments = '–≤–∫–ª—é—á–∏—Ç—å: –æ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö'
b_act_inforg_com = '–≤–∫–ª—é—á–∏—Ç—å: –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ò–Ω—Ñ–æ—Ä–≥–∞'
b_act_field_trips_new = '–≤–∫–ª—é—á–∏—Ç—å: –æ –Ω–æ–≤—ã—Ö –≤—ã–µ–∑–¥–∞—Ö'
b_act_field_trips_change = '–≤–∫–ª—é—á–∏—Ç—å: –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≤—ã–µ–∑–¥–∞—Ö'
b_act_coords_change = '–≤–∫–ª—é—á–∏—Ç—å: –æ —Å–º–µ–Ω–µ –º–µ—Å—Ç–∞ —à—Ç–∞–±–∞'
b_act_first_post_change = '–≤–∫–ª—é—á–∏—Ç—å: –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ø–µ—Ä–≤–æ–º –ø–æ—Å—Ç–µ'
b_deact_all = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ–ª–µ–µ –≥–∏–±–∫–æ'
b_deact_new_search = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –æ –Ω–æ–≤—ã—Ö –ø–æ–∏—Å–∫–∞—Ö'
b_deact_stat_change = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–æ–≤'
b_deact_all_comments = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –æ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö'
b_deact_inforg_com = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ò–Ω—Ñ–æ—Ä–≥–∞'
b_deact_field_trips_new = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –æ –Ω–æ–≤—ã—Ö –≤—ã–µ–∑–¥–∞—Ö'
b_deact_field_trips_change = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≤—ã–µ–∑–¥–∞—Ö'
b_deact_coords_change = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –æ —Å–º–µ–Ω–µ –º–µ—Å—Ç–∞ —à—Ç–∞–±–∞'
b_deact_first_post_change = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ø–µ—Ä–≤–æ–º –ø–æ—Å—Ç–µ'

# Settings - coordinates
b_coords_auto_def = KeyboardButton(text='–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"', request_location=True)
b_coords_man_def = '–≤–≤–µ—Å—Ç–∏ "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã" –≤—Ä—É—á–Ω—É—é'
b_coords_check = '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"'
b_coords_del = '—É–¥–∞–ª–∏—Ç—å "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"'

# Dialogue if Region ‚Äì is Moscow
b_reg_moscow = '–¥–∞, –ú–æ—Å–∫–≤–∞ ‚Äì –º–æ–π —Ä–µ–≥–∏–æ–Ω'
b_reg_not_moscow = '–Ω–µ—Ç, —è –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞'



# Settings - Fed Dist - Regions
b_menu_set_region = '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–æ–≤'

# Other menu
b_view_latest_searches = '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∏—Å–∫–∏'
b_goto_community = '–Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –±–æ—Ç–∞'
b_goto_first_search = '–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –Ω–æ–≤–∏—á–∫–∞'
b_goto_photos = '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ —Ñ–æ—Ç–æ —Å –ø–æ–∏—Å–∫–æ–≤'
keyboard_other = [
    [b_view_latest_searches],
    [b_goto_first_search],
    [b_goto_community],
    [b_goto_photos],
    [b_back_to_start],
]

# Admin - specially keep it for Admin, regular users unlikely will be interested in it

b_act_titles = '–Ω–∞–∑–≤–∞–Ω–∏—è'  # these are "Title update notification" button

b_admin_menu = 'admin'
b_test_menu = 'test'
b_test_search_follow_mode_on = 'test search follow mode on'  # noqa
b_test_search_follow_mode_off = 'test search follow mode off'

b_pref_age_0_6_act = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –ú–∞–ª–µ–Ω—å–∫–∏–µ –î–µ—Ç–∏ 0-6 –ª–µ—Ç'
b_pref_age_0_6_deact = '–≤–∫–ª—é—á–∏—Ç—å: –ú–∞–ª–µ–Ω—å–∫–∏–µ –î–µ—Ç–∏ 0-6 –ª–µ—Ç'
b_pref_age_7_13_act = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –ü–æ–¥—Ä–æ—Å—Ç–∫–∏ 7-13 –ª–µ—Ç'
b_pref_age_7_13_deact = '–≤–∫–ª—é—á–∏—Ç—å: –ü–æ–¥—Ä–æ—Å—Ç–∫–∏ 7-13 –ª–µ—Ç'
b_pref_age_14_20_act = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –ú–æ–ª–æ–¥–µ–∂—å 14-20 –ª–µ—Ç'
b_pref_age_14_20_deact = '–≤–∫–ª—é—á–∏—Ç—å: –ú–æ–ª–æ–¥–µ–∂—å 14-20 –ª–µ—Ç'
b_pref_age_21_50_act = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –í–∑—Ä–æ—Å–ª—ã–µ 21-50 –ª–µ—Ç'
b_pref_age_21_50_deact = '–≤–∫–ª—é—á–∏—Ç—å: –í–∑—Ä–æ—Å–ª—ã–µ 21-50 –ª–µ—Ç'
b_pref_age_51_80_act = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –°—Ç–∞—Ä—à–µ–µ –ü–æ–∫–æ–ª–µ–Ω–∏–µ 51-80 –ª–µ—Ç'
b_pref_age_51_80_deact = '–≤–∫–ª—é—á–∏—Ç—å: –°—Ç–∞—Ä—à–µ–µ –ü–æ–∫–æ–ª–µ–Ω–∏–µ 51-80 –ª–µ—Ç'
b_pref_age_81_on_act = '–æ—Ç–∫–ª—é—á–∏—Ç—å: –°—Ç–∞—Ä—Ü—ã –±–æ–ª–µ–µ 80 –ª–µ—Ç'
b_pref_age_81_on_deact = '–≤–∫–ª—é—á–∏—Ç—å: –°—Ç–∞—Ä—Ü—ã –±–æ–ª–µ–µ 80 –ª–µ—Ç'

b_pref_radius_act = '–≤–∫–ª—é—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é'
b_pref_radius_deact = '–æ—Ç–∫–ª—é—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é'
b_pref_radius_change = '–∏–∑–º–µ–Ω–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é'

b_help_yes = '–¥–∞, –ø–æ–º–æ–≥–∏—Ç–µ –º–Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç'
b_help_no = '–Ω–µ—Ç, –ø–æ–º–æ—â—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'


def compose_msg_on_active_searches_in_one_reg(cur: cursor, region: int, user_data) -> str:
    """Compose a part of message on the list of active searches in the given region with relation to user's coords"""

    pre_url = 'https://lizaalert.org/forum/viewtopic.php?t='
    text = ''

    cur.execute(
        """SELECT s2.* FROM 
            (SELECT s.search_forum_num, s.search_start_time, s.display_name, sa.latitude, sa.longitude, 
            s.topic_type, s.family_name, s.age 
            FROM searches s 
            LEFT JOIN search_coordinates sa ON s.search_forum_num = sa.search_id 
            WHERE (s.status='–ò—â–µ–º' OR s.status='–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω') 
                AND s.forum_folder_id=%s ORDER BY s.search_start_time DESC) s2 
        LEFT JOIN search_health_check shc ON s2.search_forum_num=shc.search_forum_num
        WHERE (shc.status is NULL or shc.status='ok' or shc.status='regular') 
        ORDER BY s2.search_start_time DESC;""",
        (region,),
    )
    searches_list = cur.fetchall()

    user_lat = None
    user_lon = None

    if user_data:
        user_lat = user_data[0]
        user_lon = user_data[1]

    for line in searches_list:
        search = SearchSummary()
        (
            search.topic_id,
            search.start_time,
            search.display_name,
            search_lat,
            search_lon,
            search.topic_type,
            search.name,
            search.age,
        ) = list(line)

        if time_counter_since_search_start(search.start_time)[1] >= 60:
            continue

        time_since_start = time_counter_since_search_start(search.start_time)[0]

        if user_lat and search_lat:
            dist = distance_to_search(search_lat, search_lon, user_lat, user_lon)
            dist_and_dir = f' {dist[1]} {dist[0]} –∫–º'
        else:
            dist_and_dir = ''

        if not search.display_name:
            age_string = f' {age_writer(search.age)}' if search.age != 0 else ''
            search.display_name = f'{search.name}{age_string}'

        text += f'{time_since_start}{dist_and_dir} <a href="{pre_url}{search.topic_id}">{search.display_name}</a>\n'

    return text


def compose_msg_on_active_searches_in_one_reg_ikb(
    cur: cursor, region: int, user_data: Tuple[str, str], user_id: int
) -> List:
    """Compose a part of message on the list of active searches in the given region with relation to user's coords"""
    # issue#425 it is ikb variant of the above function, returns data formated for inline keyboard
    # 1st element of returned list is general info and should be popped
    # rest elements are searches to be showed as inline buttons

    pre_url = 'https://lizaalert.org/forum/viewtopic.php?t='
    ikb = []

    cur.execute(
        """SELECT s2.*, upswl.search_following_mode FROM 
            (SELECT s.search_forum_num, s.search_start_time, s.display_name, sa.latitude, sa.longitude, 
            s.topic_type, s.family_name, s.age 
            FROM searches s 
            LEFT JOIN search_coordinates sa ON s.search_forum_num = sa.search_id 
            WHERE (s.status='–ò—â–µ–º' OR s.status='–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω') 
                AND s.forum_folder_id=%(region)s ORDER BY s.search_start_time DESC) s2 
        LEFT JOIN search_health_check shc ON s2.search_forum_num=shc.search_forum_num
        LEFT JOIN user_pref_search_whitelist upswl ON upswl.search_id=s2.search_forum_num and upswl.user_id=%(user_id)s
        WHERE (shc.status is NULL or shc.status='ok' or shc.status='regular') 
        ORDER BY s2.search_start_time DESC;""",
        {'region': region, 'user_id': user_id},
    )
    searches_list = cur.fetchall()

    user_lat = None
    user_lon = None

    if user_data:
        user_lat = user_data[0]
        user_lon = user_data[1]

    for line in searches_list:
        search = SearchSummary()
        (
            search.topic_id,
            search.start_time,
            search.display_name,
            search_lat,
            search_lon,
            search.topic_type,
            search.name,
            search.age,
            search_following_mode,
        ) = list(line)

        if time_counter_since_search_start(search.start_time)[1] >= 60:
            continue

        time_since_start = time_counter_since_search_start(search.start_time)[0]

        if user_lat and search_lat:
            dist = distance_to_search(search_lat, search_lon, user_lat, user_lon, False)
            dist_and_dir = f' {dist[1]} {dist[0]} –∫–º'
        else:
            dist_and_dir = ''

        if not search.display_name:
            age_string = f' {age_writer(search.age)}' if search.age != 0 else ''
            search.display_name = f'{search.name}{age_string}'

        ikb += search_button_row_ikb(
            search_following_mode,
            f'{time_since_start}{dist_and_dir}',
            search.topic_id,
            search.display_name,
            f'{pre_url}{search.topic_id}',
        )
    return ikb


def compose_full_message_on_list_of_searches(
    cur: cursor, list_type: str, user_id: int, region: int, region_name: str
) -> str:
    """Compose a Final message on the list of searches in the given region"""

    msg = ''

    cur.execute('SELECT latitude, longitude FROM user_coordinates WHERE user_id=%s LIMIT 1;', (user_id,))

    user_data = cur.fetchone()

    # combine the list of last 20 searches
    if list_type == 'all':
        msg += compose_msg_on_all_last_searches(cur, region)

        if msg:
            msg = (
                '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–æ–∏—Å–∫–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ <a href="https://lizaalert.org/forum/viewforum.php?f='
                + str(region)
                + '">'
                + region_name
                + '</a>:\n'
                + msg
            )

        else:
            msg = (
                '–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∏—Å–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '
                '<a href="https://lizaalert.org/forum/viewforum.php?f='
                + str(region)
                + '">'
                + region_name
                + '</a>, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–∏—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É '
                '–≤ <a href="https://t.me/joinchat/2J-kV0GaCgwxY2Ni">–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –ß–∞—Ç–µ '
                '–≤ —Ç–µ–ª–µ–≥—Ä–∞–º</a>, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.'
            )

    # Combine the list of the latest active searches
    else:
        msg += compose_msg_on_active_searches_in_one_reg(cur, region, user_data)

        if msg:
            msg = (
                '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–∏—Å–∫–∏ –∑–∞ 60 –¥–Ω–µ–π –≤ —Ä–∞–∑–¥–µ–ª–µ <a href="https://lizaalert.org/forum/viewforum.php?f='
                + str(region)
                + '">'
                + region_name
                + '</a>:\n'
                + msg
            )

        else:
            msg = (
                '–í —Ä–∞–∑–¥–µ–ª–µ <a href="https://lizaalert.org/forum/viewforum.php?f='
                + str(region)
                + '">'
                + region_name
                + '</a> –≤—Å–µ –ø–æ–∏—Å–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã.'
            )

    return msg


def compose_full_message_on_list_of_searches_ikb(
    cur: cursor, list_type: str, user_id: int, region: int, region_name: str
):  # issue#425
    """Compose a Final message on the list of searches in the given region"""
    # issue#425 This variant of the above function returns data in format used to compose inline keyboard
    # 1st element is caption
    # rest elements are searches in format to be showed as inline buttons

    ikb = []

    cur.execute('SELECT latitude, longitude FROM user_coordinates WHERE user_id=%s LIMIT 1;', (user_id,))

    user_data = cur.fetchone()

    url = f'https://lizaalert.org/forum/viewforum.php?f={region}'
    # combine the list of last 20 searches
    if list_type == 'all':
        ikb += compose_msg_on_all_last_searches_ikb(cur, region, user_id)
        logging.info('ikb += compose_msg_on_all_last_searches_ikb == ' + str(ikb))

        if len(ikb) > 0:
            msg = f'–ü–æ—Å–ª. 20 –ø–æ–∏—Å–∫–æ–≤ –≤ {region_name}'
            ikb.insert(0, [{'text': msg, 'url': url}])
        else:
            msg = (
                '–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∏—Å–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '
                '<a href="https://lizaalert.org/forum/viewforum.php?f='
                + str(region)
                + '">'
                + region_name
                + '</a>, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–∏—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É '
                '–≤ <a href="https://t.me/joinchat/2J-kV0GaCgwxY2Ni">–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –ß–∞—Ç–µ '
                '–≤ —Ç–µ–ª–µ–≥—Ä–∞–º</a>, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.'
            )
            ikb = [[{'text': msg, 'url': url}]]

    # Combine the list of the latest active searches
    else:
        ikb += compose_msg_on_active_searches_in_one_reg_ikb(cur, region, user_data, user_id)
        logging.info(f'ikb += compose_msg_on_active_searches_in_one_reg_ikb == {ikb}; ({region=})')

        if len(ikb) > 0:
            msg = f'–ê–∫—Ç. –ø–æ–∏—Å–∫–∏ –∑–∞ 60 –¥–Ω–µ–π –≤ {region_name}'
            ikb.insert(0, [{'text': msg, 'url': url}])
        else:
            msg = f'–ù–µ—Ç –∞–∫—Ç. –ø–æ–∏—Å–∫–æ–≤ –∑–∞ 60 –¥–Ω–µ–π –≤ {region_name}'
            ikb = [[{'text': msg, 'url': url}]]

    return ikb


# issue#425
def get_param_if_exists(upd: Update, func_input: str):
    """Return either value if exist or None. Used for messages with changing schema from telegram"""

    update = upd  # noqa

    try:
        func_output = eval(func_input)
    except:  # noqa
        func_output = None

    return func_output


# issue#425 inspired by manage_topic_type
# issue#425
async def leave_chat_async(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.leave_chat(chat_id=context.job.chat_id)

    return None


async def prepare_message_for_leave_chat_async(user_id):
    # TODO DOUBLE
    bot_token = get_app_config().bot_api_token__prod
    application = Application.builder().token(bot_token).build()
    job_queue = application.job_queue
    job_queue.run_once(leave_chat_async, 0, chat_id=user_id)

    async with application:
        await application.initialize()
        await application.start()
        await application.stop()
        await application.shutdown()

    return 'ok'


def process_leaving_chat_async(user_id) -> None:
    asyncio.run(prepare_message_for_leave_chat_async(user_id))

    return None


def get_last_bot_message_id(response: requests.Response) -> int:
    """Get the message id of the bot's message that was just sent"""

    try:
        message_id = response.json()['result']['message_id']

    except Exception as e:  # noqa
        message_id = None

    return message_id


def inline_processing(cur, response, params) -> None:
    """process the response got from inline buttons interactions"""

    if not response or 'chat_id' not in params.keys():
        return None

    chat_id = params['chat_id']
    sent_message_id = get_last_bot_message_id(response)

    if 'reply_markup' in params.keys() and 'inline_keyboard' in params['reply_markup'].keys():
        prev_message_id = get_last_user_inline_dialogue(cur, chat_id)
        logging.info(f'{prev_message_id=}')
        save_last_user_inline_dialogue(cur, chat_id, sent_message_id)

    return None


def send_message_to_api(bot_token, user_id, message, params):
    """send message directly to Telegram API w/o any wrappers ar libraries"""

    try:
        parse_mode = ''
        disable_web_page_preview = ''
        reply_markup = ''
        if params:
            if 'parse_mode' in params.keys():
                parse_mode = f'&parse_mode={params["parse_mode"]}'
            if 'disable_web_page_preview' in params.keys():
                disable_web_page_preview = f'&disable_web_page_preview={params["disable_web_page_preview"]}'
            if 'reply_markup' in params.keys():
                rep_as_str = str(json.dumps(params['reply_markup']))
                reply_markup = f'&reply_markup={urllib.parse.quote(rep_as_str)}'
        message_encoded = f'&text={urllib.parse.quote(message)}'

        request_text = (
            f'https://api.telegram.org/bot{bot_token}/sendMessage?chat_id={user_id}'
            f'{message_encoded}{parse_mode}{disable_web_page_preview}{reply_markup}'
        )

        with requests.Session() as session:
            response = session.get(request_text)
            logging.info(str(response))

    except Exception as e:
        logging.exception(e)
        logging.info('Error in getting response from Telegram')
        response = None

    result = process_response_of_api_call(user_id, response)

    return result


def api_callback_edit_inline_keyboard(bot_token: str, callback_query: dict, reply_markup: dict, user_id: str) -> str:
    """send a notification when inline button is pushed directly to Telegram API w/o any wrappers ar libraries"""
    if reply_markup and not isinstance(reply_markup, dict):
        reply_markup_dict = reply_markup.to_dict()

    params = {
        'chat_id': callback_query['message']['chat']['id'],
        'message_id': callback_query['message']['message_id'],
        'text': callback_query['message']['text'],
        'reply_markup': reply_markup_dict,
    }

    response = make_api_call('editMessageText', bot_token, params, 'api_callback_edit_inline_keyboard')
    logging.info(f'After make_api_call(editMessageText): {response.json()=}')
    result = process_response_of_api_call(user_id, response)
    return result


def get_the_update(bot: Bot, request: Request) -> Update | None:
    """converts a request to an update"""

    try:
        update = Update.de_json(request.get_json(force=True), bot)
    except Exception as e:
        logging.exception(e)
        logging.error('request received has no update')
        update = None

    logging.info(f'update received: {request.get_json(force=True)}')

    return update


def get_basic_update_parameters(update: Update):
    """decompose the incoming update into the key parameters"""

    user_new_status = get_param_if_exists(update, 'update.my_chat_member.new_chat_member.status')
    timer_changed = get_param_if_exists(update, 'update.message.message_auto_delete_timer_changed')
    photo = get_param_if_exists(update, 'update.message.photo')
    document = get_param_if_exists(update, 'update.message.document')
    voice = get_param_if_exists(update, 'update.message.voice')
    contact = get_param_if_exists(update, 'update.message.contact')
    inline_query = get_param_if_exists(update, 'update.inline_query')
    sticker = get_param_if_exists(update, 'update.message.sticker.file_id')
    user_latitude = get_param_if_exists(update, 'update.effective_message.location.latitude')
    user_longitude = get_param_if_exists(update, 'update.effective_message.location.longitude')
    got_message = get_param_if_exists(update, 'update.effective_message.text')

    channel_type = get_param_if_exists(update, 'update.edited_channel_post.chat.type')
    if not channel_type:
        channel_type = get_param_if_exists(update, 'update.channel_post.chat.type')
    if not channel_type:
        channel_type = get_param_if_exists(update, 'update.my_chat_member.chat.type')

    # the purpose of this bot - sending messages to unique users, this way
    # chat_id is treated as user_id and vice versa (which is not true in general)

    username = get_param_if_exists(update, 'update.effective_user.username')
    if not username:
        username = get_param_if_exists(update, 'update.effective_message.from_user.username')

    user_id = get_param_if_exists(update, 'update.effective_user.id')
    if not user_id:
        logging.exception('EFFECTIVE USER.ID IS NOT GIVEN!')
        user_id = get_param_if_exists(update, 'update.effective_message.from_user.id')
    if not user_id:
        user_id = get_param_if_exists(update, 'update.effective_message.chat.id')
    if not user_id:
        user_id = get_param_if_exists(update, 'update.edited_channel_post.chat.id')
    if not user_id:
        user_id = get_param_if_exists(update, 'update.my_chat_member.chat.id')
    if not user_id:
        user_id = get_param_if_exists(update, 'update.inline_query.from.id')
    if not user_id:
        logging.info('failed to define user_id')

    # FIXME ‚Äì 17.11.2023 ‚Äì playing with getting inline buttons interactions
    callback_query = get_param_if_exists(update, 'update.callback_query')
    callback_query_id = get_param_if_exists(update, 'update.callback_query.id')

    logging.info(f'get_basic_update_parameters..callback_query==, {str(callback_query)}')
    got_hash = None
    got_callback = None
    if callback_query:
        callback_data_text = callback_query.data
        try:
            got_callback = eval(callback_data_text)
            got_hash = got_callback.get('hash')
        except Exception as e:
            logging.exception(e)
            notify_admin(f'callback dict was not recognized for {callback_data_text=}')
        logging.info(f'get_basic_update_parameters..{got_callback=}, {got_hash=} from {callback_data_text=}')
    # FIXME ^^^

    return (
        user_new_status,
        timer_changed,
        photo,
        document,
        voice,
        contact,
        inline_query,
        sticker,
        user_latitude,
        user_longitude,
        got_message,
        channel_type,
        username,
        user_id,
        got_hash,
        got_callback,
        callback_query_id,
        callback_query,
    )


def process_unneeded_messages(
    update, user_id, timer_changed, photo, document, voice, sticker, channel_type, contact, inline_query
):
    """process messages which are not a part of designed dialogue"""

    # CASE 2 ‚Äì when user changed auto-delete setting in the bot
    if timer_changed:
        logging.info('user changed auto-delete timer settings')

    # CASE 3 ‚Äì when user sends a PHOTO or attached DOCUMENT or VOICE message
    elif photo or document or voice or sticker:
        logging.debug('user sends photos to bot')

        bot_message = (
            '–°–ø–∞—Å–∏–±–æ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! –û–¥–Ω–∞–∫–æ, –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏. '
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –±–æ—Ç–∞, –Ω–∞—Ö–æ–¥—è—â–∏–º–∏—Å—è –Ω–∞ '
            '–º–µ—Å—Ç–µ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–µ–ª–µ–≥—Ä–∞–º.'
        )
        data = {'text': bot_message}
        process_sending_message_async(user_id=user_id, data=data)

    # CASE 4 ‚Äì when some Channel writes to bot
    elif channel_type and user_id < 0:
        notify_admin('[comm]: INFO: CHANNEL sends messages to bot!')

        try:
            process_leaving_chat_async(user_id)
            notify_admin(f'[comm]: INFO: we have left the CHANNEL {user_id}')

        except Exception as e:
            logging.info(f'[comm]: Leaving channel was not successful: {user_id}')
            logging.exception(e)
            notify_admin(f'[comm]: Leaving channel was not successful: {user_id}')

    # CASE 5 ‚Äì when user sends Contact
    elif contact:
        bot_message = (
            '–°–ø–∞—Å–∏–±–æ, –±—É–¥—É –∑–Ω–∞—Ç—å. –í–æ—Ç —Ç–æ–ª—å–∫–æ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç '
            '—Ç–æ–ª—å–∫–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã.'
        )
        data = {'text': bot_message}
        process_sending_message_async(user_id=user_id, data=data)

    # CASE 6 ‚Äì when user mentions bot as @LizaAlert_Searcher_Bot in another telegram chat. Bot should do nothing
    elif inline_query:
        notify_admin('[comm]: User mentioned bot in some chats')
        logging.info(f'bot was mentioned in other chats: {update}')

    return None


def get_coordinates_from_string(got_message: str, lat_placeholder, lon_placeholder) -> Tuple[float, float]:
    """gets coordinates from string"""

    user_latitude, user_longitude = None, None
    # Check if user input is in format of coordinates
    # noinspection PyBroadException
    try:
        numbers = [float(s) for s in re.findall(r'-?\d+\.?\d*', got_message)]
        if numbers and len(numbers) > 1 and 30 < numbers[0] < 80 and 10 < numbers[1] < 190:
            user_latitude = numbers[0]
            user_longitude = numbers[1]
    except Exception:
        logging.info(f'manual coordinates were not identified from string {got_message}')

    if not (user_latitude and user_longitude):
        user_latitude = lat_placeholder
        user_longitude = lon_placeholder

    return user_latitude, user_longitude


def process_user_coordinates(
    cur: cursor,
    user_id: int,
    user_latitude: float,
    user_longitude: float,
    b_coords_check: str,
    b_coords_del: str,
    b_back_to_start: str,
    bot_request_aft_usr_msg: str,
) -> Optional[Any]:
    """process coordinates which user sent to bot"""

    save_user_coordinates(cur, user_id, user_latitude, user_longitude)

    bot_message = '–í–∞—à–∏ "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã" —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n'
    bot_message += generate_yandex_maps_place_link(user_latitude, user_longitude, 'coords')
    bot_message += (
        '\n–¢–µ–ø–µ—Ä—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–∏—Å–∫–æ–≤, –≥–¥–µ —É–¥–∞—Å—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —à—Ç–∞–±–∞ –∏–ª–∏ '
        '–Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –±—É–¥–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ '
        '–ø—Ä—è–º–æ–π –æ—Ç –≤–∞—à–∏—Ö "–¥–æ–º–∞—à–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç".'
    )

    keyboard_settings = [[b_coords_check], [b_coords_del], [b_back_to_start]]
    reply_markup = ReplyKeyboardMarkup(keyboard_settings, resize_keyboard=True)

    data = {'text': bot_message, 'reply_markup': reply_markup, 'parse_mode': 'HTML', 'disable_web_page_preview': True}
    process_sending_message_async(user_id=user_id, data=data)
    # msg_sent_by_specific_code = True

    # saving the last message from bot
    if not bot_request_aft_usr_msg:
        bot_request_aft_usr_msg = 'not_defined'

    try:
        cur.execute("""DELETE FROM msg_from_bot WHERE user_id=%s;""", (user_id,))

        cur.execute(
            """INSERT INTO msg_from_bot (user_id, time, msg_type) values (%s, %s, %s);""",
            (user_id, datetime.datetime.now(), bot_request_aft_usr_msg),
        )

    except Exception as e:
        logging.info('failed to update the last saved message from bot')
        logging.exception(e)

    save_bot_reply_to_user(cur, user_id, bot_message)

    return None


def run_onboarding(user_id: int, username: str, onboarding_step_id: int, got_message: str) -> int:
    """part of the script responsible for orchestration of activities for non-finally-onboarded users"""

    if onboarding_step_id == 21:  # region_set
        # mark that onboarding is finished
        if got_message:
            save_onboarding_step(user_id, username, 'finished')
            onboarding_step_id = 80

    return onboarding_step_id


def main(request: Request) -> str:
    """Main function to orchestrate the whole script"""

    if request.method != 'POST':
        logging.error(f'non-post request identified {request}')
        return 'it was not post request'

    bot_token = get_app_config().bot_api_token__prod
    bot = Bot(token=bot_token)
    update = get_the_update(bot, request)
    return process_update(update)


def process_update(update: Update) -> str:
    bot_token = get_app_config().bot_api_token__prod

    (
        user_new_status,
        timer_changed,
        photo,
        document,
        voice,
        contact,
        inline_query,
        sticker,
        user_latitude,
        user_longitude,
        got_message,
        channel_type,
        username,
        user_id,
        got_hash,
        got_callback,
        callback_query_id,
        callback_query,
    ) = get_basic_update_parameters(update)

    logging.info(f'after get_basic_update_parameters:  {got_callback=}')

    if (
        timer_changed
        or photo
        or document
        or voice
        or sticker
        or (channel_type and user_id < 0)
        or contact
        or inline_query
    ):
        process_unneeded_messages(
            update, user_id, timer_changed, photo, document, voice, sticker, channel_type, contact, inline_query
        )
        return 'finished successfully. it was useless message for bot'

    if user_new_status in {'kicked', 'member'}:
        process_block_unblock_user(user_id, user_new_status)
        return 'finished successfully. it was a system message on bot block/unblock'

    b = AllButtons(full_buttons_dict)

    # Buttons & Keyboards
    # Start & Main menu

    # basic markup which will be substituted for all specific cases
    reply_markup = reply_markup_main

    conn_psy = sql_connect_by_psycopg2()
    cur = conn_psy.cursor()

    logging.info(f'Before if got_message and not got_callback: {got_message=}')

    if got_message and not got_callback:
        last_inline_message_ids = get_last_user_inline_dialogue(cur, user_id)
        if last_inline_message_ids:
            for last_inline_message_id in last_inline_message_ids:
                params = {'chat_id': user_id, 'message_id': last_inline_message_id}
                make_api_call('editMessageReplyMarkup', bot_token, params, 'main() if got_message and not got_callback')
            delete_last_user_inline_dialogue(cur, user_id)

    if got_message:
        save_user_message_to_bot(cur, user_id, got_message)

    bot_request_aft_usr_msg = ''
    msg_sent_by_specific_code = False

    user_is_new = check_if_new_user(cur, user_id)
    logging.info(f'After check_if_new_user: {user_is_new=}')
    if user_is_new:
        save_new_user(user_id, username)

    onboarding_step_id, onboarding_step_name = check_onboarding_step(cur, user_id, user_is_new)
    user_regions = get_user_reg_folders_preferences(cur, user_id)
    user_role = get_user_role(cur, user_id)

    # Check what was last request from bot and if bot is expecting user's input
    bot_request_bfr_usr_msg = get_last_bot_msg(cur, user_id)

    # placeholder for the New message from bot as reply to "update". Placed here ‚Äì to avoid errors of GCF
    bot_message = ''

    # ONBOARDING PHASE
    if onboarding_step_id < 80:
        onboarding_step_id = run_onboarding(user_id, username, onboarding_step_id, got_message)

    # get coordinates from the text
    if bot_request_bfr_usr_msg == 'input_of_coords_man':
        user_latitude, user_longitude = get_coordinates_from_string(got_message, user_latitude, user_longitude)

    # if there is any coordinates from user
    if user_latitude and user_longitude:
        process_user_coordinates(
            cur,
            user_id,
            user_latitude,
            user_longitude,
            b_coords_check,
            b_coords_del,
            b_back_to_start,
            bot_request_aft_usr_msg,
        )
        cur.close()
        conn_psy.close()

        return 'finished successfully. in was a message with user coordinates'

    try:
        # if there is a text message from user
        if got_message:
            # if pushed \start
            if got_message == c_start:
                if user_is_new:
                    # FIXME ‚Äì 02.12.2023 ‚Äì hiding menu button for the newcomers
                    #  (in the future it should be done in manage_user script)
                    method = 'setMyCommands'
                    params = {'commands': [], 'scope': {'type': 'chat', 'chat_id': user_id}}
                    response = make_api_call(
                        method=method, bot_api_token=bot_token, params=params, call_context='if user_is_new'
                    )
                    result = process_response_of_api_call(user_id, response)
                    logging.info(f'hiding user {user_id} menu status = {result}')
                    # FIXME ^^^

                    bot_message = (
                        '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ë–æ—Ç –ü–æ–∏—Å–∫–æ–≤–∏–∫–∞ –õ–∏–∑–∞–ê–ª–µ—Ä—Ç. –û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –ü–æ–∏—Å–∫–æ–≤–∏–∫–∞–º '
                        '–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –ø–æ–∏—Å–∫–∞—Ö –∏–ª–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö '
                        '–≤ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∏—Å–∫–∞—Ö.'
                        '\n\n–ë–æ—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ–Ω—è—é—Ç –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. '
                        '–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è, —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è '
                        '–µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.'
                        '\n\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø–æ–¥ –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                        '—É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å —Å–µ–π—á–∞—Å?'
                    )
                    keyboard_role = [
                        [b_role_iam_la],
                        [b_role_want_to_be_la],
                        [b_role_looking_for_person],
                        [b_role_other],
                        [b_role_secret],
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard_role, resize_keyboard=True)

                else:
                    bot_message = '–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ–Ω—è—é—Ç –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.'
                    reply_markup = reply_markup_main

            elif (
                onboarding_step_id == 20 and got_message in full_dict_of_regions
            ) or got_message == b_reg_moscow:  # "moscow_replied"
                # FIXME ‚Äì 02.12.2023 ‚Äì un-hiding menu button for the newcomers
                #  (in the future it should be done in manage_user script)
                method = 'deleteMyCommands'
                params = {'scope': {'type': 'chat', 'chat_id': user_id}}
                response = make_api_call(method=method, bot_api_token=bot_token, params=params)
                result = process_response_of_api_call(user_id, response)
                # FIXME ^^^

                bot_message = (
                    'üéâ –û—Ç–ª–∏—á–Ω–æ, –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –±–∞–∑–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ë–æ—Ç–∞.\n\n'
                    '–°–ø–∏—Å–æ–∫ —Ç–æ–≥–æ, —á—Ç–æ —Å–µ–π—á–∞—Å —É–º–µ–µ—Ç –±–æ—Ç:\n'
                    '- –í—ã—Å—ã–ª–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∏–¥—É—â–∏–º –ø–æ–∏—Å–∫–∞–º\n'
                    '- –í—ã—Å—ã–ª–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ–∏—Å–∫–∞–º–∏\n'
                    '- –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ –Ω–æ–≤—ã—Ö –ø–æ–∏—Å–∫–∞—Ö —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –ø–æ–∏—Å–∫–∞\n'
                    '- –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –°—Ç–∞—Ç—É—Å–∞ / –ü–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –ò–Ω—Ñ–æ—Ä–≥–∞\n'
                    '- –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ò–Ω—Ñ–æ—Ä–≥–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'
                    '- –ü–æ–∑–≤–æ–ª—è–µ—Ç –≥–∏–±–∫–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç '
                    '–≤–∞—Å, –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø—Ä–æ–ø–∞–≤—à–µ–≥–æ –∏ —Ç.–ø.\n\n'
                    '–° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤—ã –Ω–∞—á–Ω—ë—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ '
                    '—Ä–∞–º–∫–∞—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. '
                    '–ò–ª–∏ –∂–µ –≤—ã —Å—Ä–∞–∑—É –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–∫–∏ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏ –ü–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∏—Å–∫–æ–≤.\n\n'
                    '–ë–æ—Ç –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):\n'
                    '- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n'
                    '- –£–∫–∞–∑–∞—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\n'
                    '- –£–∫–∞–∑–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –¥–æ –ø–æ–∏—Å–∫–∞\n'
                    '- –£–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø—Ä–æ–ø–∞–≤—à–∏—Ö\n'
                    '- –°–≤—è–∑–∞—Ç—å –±–æ—Ç —Å –§–æ—Ä—É–º–æ–º\n\n'
                    '–°–æ–∑–¥–∞—Ç–µ–ª–∏ –ë–æ—Ç–∞ –Ω–∞–¥–µ—é—Ç—Å—è, —á—Ç–æ –ë–æ—Ç —Å–º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–∞–º –≤ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á–∞—Ö! –£–¥–∞—á–∏!'
                )

                keyboard_role = [
                    [b_set_pref_notif_type],
                    [b_set_pref_coords],
                    [b_set_pref_radius],
                    [b_set_pref_age],
                    [b_set_forum_nick],
                    [b_view_latest_searches],
                    [b_view_act_searches],
                    [b_back_to_start],
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard_role, resize_keyboard=True)

                if got_message == b_reg_moscow:
                    bot_message, reply_markup = manage_if_moscow(
                        cur,
                        user_id,
                        username,
                        got_message,
                        b_reg_moscow,
                        b_reg_not_moscow,
                        reply_markup,
                        keyboard_fed_dist_set,
                        bot_message,
                        user_role,
                    )
                else:
                    save_onboarding_step(user_id, username, 'region_set')
                    save_user_pref_topic_type(cur, user_id, 'default', user_role)
                    updated_regions = update_and_download_list_of_regions(
                        cur, user_id, got_message, b_menu_set_region, b_fed_dist_pick_other
                    )

            elif got_message in {
                b_role_looking_for_person,
                b_role_want_to_be_la,
                b_role_iam_la,
                b_role_secret,
                b_role_other,
                b_orders_done,
                b_orders_tbd,
            }:
                # save user role & onboarding stage
                if got_message in {
                    b_role_want_to_be_la,
                    b_role_iam_la,
                    b_role_looking_for_person,
                    b_role_other,
                    b_role_secret,
                }:
                    user_role = save_user_pref_role(cur, user_id, got_message)
                    save_onboarding_step(user_id, username, 'role_set')

                # get user role = relatives looking for a person
                if got_message == b_role_looking_for_person:
                    bot_message = (
                        '–¢–æ–≥–¥–∞ –≤–∞–º —Å–ª–µ–¥—É–µ—Ç:\n\n'
                        '1. –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∏—Å–∫ –≤ –õ–∏–∑–∞–ê–ª–µ—Ä—Ç –û–î–ù–ò–ú –ò–ó –î–í–£–• —Å–ø–æ—Å–æ–±–æ–≤:\n'
                        '  1.1. –°–ê–ú–û–ï –ë–´–°–¢–†–û–ï ‚Äì –∑–≤–æ–Ω–∏—Ç–µ –Ω–∞ 88007005452 (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–æ—Ä—è—á–∞—è '
                        '–ª–∏–Ω–∏—è –õ–∏–∑–∞–ê–ª–µ—Ä—Ç). –í–∞–º –∑–∞–¥–∞–¥—É—Ç —Ä—è–¥ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ '
                        '—É—Å–∫–æ—Ä–∏—Ç –ø–æ–∏—Å–∫, –∏ –ø–æ—Å–æ–≤–µ—Ç—É—é—Ç –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è. \n'
                        '  1.2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞ https://lizaalert.org/zayavka-na-poisk/ \n'
                        '–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –Ω–∞ —Å–∞–π—Ç–µ –Ω—É–∂–Ω–æ –æ–∂–∏–¥–∞—Ç—å –∑–≤–æ–Ω–∫–∞ –æ—Ç –õ–∏–∑–∞–ê–ª–µ—Ä—Ç. –ù–∞ '
                        '–æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –±–æ–ª–µ–µ —á–∞—Å–∞. –ï—Å–ª–∏ –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∂–¥–∞—Ç—å, '
                        '–ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å–ª–µ–¥—É–µ—Ç –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é –æ—Ç—Ä—è–¥–∞ '
                        '88007005452, —Å–æ–æ–±—â–∏–≤, —á—Ç–æ –≤—ã —É–∂–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Å–∞–π—Ç–µ.\n\n'
                        '2. –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –ü–æ–ª–∏—Ü–∏—é. –ï—Å–ª–∏ –∏–Ω–æ–µ –Ω–µ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞–ª–∏ –Ω–∞ –≥–æ—Ä—è—á–µ–π –ª–∏–Ω–∏–∏,'
                        '–∑–∞—è–≤–∫–∞ –≤ –ü–æ–ª–∏—Ü–∏—é ‚Äì –ø–æ–º–æ–∂–µ—Ç —É—Å–∫–æ—Ä–∏—Ç—å –∏ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫. –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π '
                        '—Å–ø–æ—Å–æ–± ‚Äì –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞ 102.\n\n'
                        '3. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ö–æ–¥ –ø–æ–∏—Å–∫–∞.\n'
                        '–ö–æ–≥–¥–∞ –∑–∞—è–≤–∫–∏ –≤ –õ–∏–∑–∞–ê–ª–µ—Ä—Ç –∏ –ü–æ–ª–∏—Ü–∏—é —Å–¥–µ–ª–∞–Ω—ã, –æ—Ç—Ä—è–¥ –Ω–∞—á–Ω–µ—Ç –ø–µ—Ä–≤—ã–µ '
                        '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ–ª–æ–≤–µ–∫–∞: —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π, –ø—Ä–æ–∑–≤–æ–Ω—ã '
                        '–≤ –≥–æ—Å—É—á—Ä–µ–∂–¥–µ–Ω–∏—è, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –∏ —Ç.–ø. –í–µ—Å—å —ç—Ç–æ—Ç'
                        '–ø—Ä–æ—Ü–µ—Å—Å –≤–∞–º –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω, –Ω–æ —á–∞—Å—Ç–æ –ª—é–¥–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ–π —Å—Ç–∞–¥–∏–∏'
                        '–ø–æ–∏—Å–∫–∞. –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–µ –º–µ—Ä—ã –Ω–µ –ø–æ–º–æ–≥—É—Ç –∏ –æ—Ç—Ä—è–¥ –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å'
                        '–≤—ã–µ–∑–¥ "–Ω–∞ –º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞" ‚Äì —Ç–æ–≥–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ö–æ–¥ –ø–æ–∏—Å–∫–∞ '
                        '—á–µ—Ä–µ–∑ –¥–∞–Ω–Ω—ã–π –ë–æ—Ç, –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞: –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç'
                        '—É–∫–∞–∑–∞—Ç—å –≤–∞—à —Ä–µ–≥–∏–æ–Ω –∏ –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –≤—ã –±—É–¥–µ—Ç–µ '
                        '–ø–æ–ª—É—á–∞—Ç—å. '
                        '–ö–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ —Ñ–æ—Ä—É–º https://lizaalert.org/forum/, '
                        '–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞ —Ç–∞–º.\n'
                        '–û—Ç—Ä—è–¥ —Å–¥–µ–ª–∞–µ—Ç –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤–∞—à–µ–≥–æ –±–ª–∏–∑–∫–æ–≥–æ –∫–∞–∫ –º–æ–∂–Ω–æ '
                        '—Å–∫–æ—Ä–µ–µ.\n\n'
                        '–°–æ–æ–±—â–∏—Ç–µ, –ø–æ–¥–∞–ª–∏ –ª–∏ –≤—ã –∑–∞—è–≤–∫–∏ –≤ –õ–∏–∑–∞–ê–ª–µ—Ä—Ç –∏ –ü–æ–ª–∏—Ü–∏—é?'
                    )

                    keyboard_orders = [[b_orders_done], [b_orders_tbd]]
                    reply_markup = ReplyKeyboardMarkup(keyboard_orders, resize_keyboard=True)

                # get user role = potential LA volunteer
                elif got_message == b_role_want_to_be_la:
                    bot_message = (
                        '–°—É–ø–µ—Ä! \n'
                        '–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–º–æ–≥–∞—Ç—å –õ–∏–∑–∞–ê–ª–µ—Ä—Ç? –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å –ª–∏ –≤—ã, –∫–∞–∫ '
                        '–≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å? –ï—Å–ª–∏ –µ—â–µ –Ω–µ—Ç ‚Äì –Ω–µ –±–µ–¥–∞ ‚Äì —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º '
                        '–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å—Ç–∞—Ç—å—ë–π: '
                        'https://takiedela.ru/news/2019/05/25/instrukciya-liza-alert/\n\n'
                        '–ó–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–∞–∂–µ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, '
                        '–≤—ã–ø–æ–ª–Ω—è—é—Ç –ü–æ–∏—Å–∫–æ–≤–∏–∫–∏ "–Ω–∞ –º–µ—Å—Ç–µ –ø–æ–∏—Å–∫–∞". –≠—Ç–æ—Ç –ë–æ—Ç –∫–∞–∫ —Ä–∞–∑ —Å—Ç–∞—Ä–∞–µ—Ç—Å—è '
                        '–ø–æ–º–æ–≥–∞—Ç—å –∏–º–µ–Ω–Ω–æ –ü–æ–∏—Å–∫–æ–≤–∏–∫–∞–º. '
                        '–ï—Å—Ç—å —Ö–æ—Ä–æ—à–∏–π —Å–∞–π—Ç, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∫–∞–∫ –Ω–∞—á–∞—Ç—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–æ–∏—Å–∫–µ: '
                        'https://xn--b1afkdgwddgp9h.xn--p1ai/\n\n'
                        '–í —Å–ª—É—á–∞–µ –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äì –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞ –æ–±—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω, '
                        '8 800 700-54-52, –≥–¥–µ –≤–∞–º –ø–æ–º–æ–≥—É—Ç —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –æ—Ç—Ä—è–¥.\n\n'
                        '–ê –µ—Å–ª–∏ –≤—ã "–∏–∑ –º–∏—Ä–∞ IT" –∏ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ–≥–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—é —ç—Ç–æ–≥–æ –ë–æ—Ç–∞,'
                        '–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç https://t.me/+2J-kV0GaCgwxY2Ni\n\n'
                        '–ù–∞–¥–µ–µ–º—Å—è, —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–∫–∞–∑–∞–ª–∞—Å—å –ø–æ–ª–µ–∑–Ω–æ–π. '
                        '–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ë–æ—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: '
                        '–≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–≥–∏–æ–Ω ‚Äì —ç—Ç–æ –ú–æ—Å–∫–≤–∞ –∏ –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –û–±–ª–∞—Å—Ç—å?'
                    )
                    keyboard_coordinates_admin = [[b_reg_moscow], [b_reg_not_moscow]]
                    reply_markup = ReplyKeyboardMarkup(keyboard_coordinates_admin, resize_keyboard=True)

                # get user role = all others
                elif got_message in {b_role_iam_la, b_role_other, b_role_secret, b_orders_done, b_orders_tbd}:
                    bot_message = (
                        '–°–ø–∞—Å–∏–±–æ. –¢–µ–ø–µ—Ä—å —É—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–≥–∏–æ–Ω ‚Äì —ç—Ç–æ '
                        '–ú–æ—Å–∫–≤–∞ –∏ –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –û–±–ª–∞—Å—Ç—å?'
                    )
                    keyboard_coordinates_admin = [[b_reg_moscow], [b_reg_not_moscow]]
                    reply_markup = ReplyKeyboardMarkup(keyboard_coordinates_admin, resize_keyboard=True)

            elif got_message in {b_reg_not_moscow}:
                bot_message, reply_markup = manage_if_moscow(
                    cur,
                    user_id,
                    username,
                    got_message,
                    b_reg_moscow,
                    b_reg_not_moscow,
                    reply_markup_main,
                    keyboard_fed_dist_set,
                    None,
                    user_role,
                )

            elif got_message == b_help_no:
                bot_message = (
                    '–°–ø–∞—Å–∏–±–æ, –ø–æ–Ω—è—Ç–Ω–æ. –ú—ã –∑–∞–ø–∏—Å–∞–ª–∏. –¢–æ–≥–¥–∞ –±–æ—Ç –±–æ–ª–µ–µ –Ω–µ –±—É–¥–µ—Ç –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç—å, '
                    '–ø–æ–∫–∞ –≤—ã —Å–∞–º–∏ –Ω–µ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –±–æ—Ç.\n\n'
                    '–ù–∞ –ø—Ä–æ—â–∞–Ω–∏–µ, –±–æ—Ç —Ö–æ—Ç–µ–ª –±—ã –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –≤–µ—â–∏, –¥–µ–ª–∞—é—â–∏–µ –º–∏—Ä –ª—É—á—à–µ:\n\n'
                    '1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å <a href="https://t.me/+6LYNNEy8BeI1NGUy">–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ç–æ '
                    '—Å –ø–æ–∏—Å–∫–æ–≤ –õ–∏–∑–∞–ê–ª–µ—Ä—Ç</a>.\n\n'
                    '2. <a href="https://lizaalert.org/otryadnye-nuzhdy/">–ü–æ–º–æ—á—å '
                    '–æ—Ç—Ä—è–¥—É –õ–∏–∑–∞–ê–ª–µ—Ä—Ç, –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤ –ª—é–¥–µ–π</a>.\n\n'
                    '3. –ü–æ–º–æ—á—å —Å–æ–∑–¥–∞—Ç–µ–ª—è–º –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤'
                    '–∏–ª–∏ –æ–ø–ª–∞—Ç–∏–≤ –æ–±–ª–∞—á–Ω—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞. –î–ª—è —ç—Ç–æ–≥–æ'
                    '<a href="https://t.me/MikeMikeT">–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –±–æ—Ç–∞</a>.\n\n'
                    '–ë–æ—Ç –µ—â–µ —Ä–∞–∑ —Ö–æ—Ç–µ–ª –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å, —á—Ç–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ –≤ –±–æ—Ç ‚Äì –æ–Ω'
                    '—Å—Ä–∞–∑—É –∂–µ "–∑–∞–±—É–¥–µ—Ç", —á—Ç–æ –≤—ã —Ä–∞–Ω–µ–µ –ø—Ä–æ—Å–∏–ª–∏ –≤–∞—Å –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å:)\n\n'
                    '–û–±–Ω–∏–º–∞–µ–º:)'
                )
                keyboard = [[b_back_to_start]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            elif got_message == b_help_yes:
                bot_message = (
                    '–°—É–ø–µ—Ä! –¢–æ–≥–¥–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —É –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.\n\n'
                    '–£ –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–æ–≤ ‚Äì –±–µ–∑ –Ω–µ–≥–æ –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, '
                    '–∫–∞–∫–∏–µ –ø–æ–∏—Å–∫–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–≥–∏–æ–Ω –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:\n'
                    '1. –õ–∏–±–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤–∞—à–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ‚Äì –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å '
                    '–≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤),\n'
                    '2. –õ–∏–±–æ –≤—ã–±—Ä–∞–≤ —Ä–µ–≥–∏–æ–Ω –≤—Ä—É—á–Ω—É—é: –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±—Ä–∞—Ç—å –§–û = '
                    '–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –û–∫—Ä—É–≥, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à —Ä–µ–≥–∏–æ–Ω, –∞ –ø–æ—Ç–æ–º –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —Å–∞–º —Ä–µ–≥–∏–æ–Ω. '
                    '\n\n'
                )

            # set user pref: urgency
            elif got_message in {
                b_pref_urgency_highest,
                b_pref_urgency_high,
                b_pref_urgency_medium,
                b_pref_urgency_low,
            }:
                save_user_pref_urgency(
                    cur,
                    user_id,
                    got_message,
                    b_pref_urgency_highest,
                    b_pref_urgency_high,
                    b_pref_urgency_medium,
                    b_pref_urgency_low,
                )
                bot_message = '–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ. –ë–æ—Ç –∑–∞–ø–æ–º–Ω–∏–ª –≤–∞—à –≤—ã–±–æ—Ä.'

            # force user to input a region
            elif not user_regions and not (
                got_message in full_dict_of_regions
                or got_message in dict_of_fed_dist
                or got_message in {b_menu_set_region, c_start, b_settings, c_settings}
            ):
                bot_message = (
                    '–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω. –î–ª—è —ç—Ç–æ–≥–æ '
                    '—Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –§–û (—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥), –∞ –∑–∞—Ç–µ–º –∏ '
                    '—Ä–µ–≥–∏–æ–Ω. –ú–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –§–û. –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ '
                    '—Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å, –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏–æ–Ω–∞. '
                    '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –Ω–µ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–≥–∏–æ–Ω.'
                )

                keyboard_coordinates_admin = [[b_menu_set_region]]
                reply_markup = ReplyKeyboardMarkup(keyboard_coordinates_admin, resize_keyboard=True)

                logging.info(f'user {user_id} is forced to fill in the region')

            elif got_callback and got_callback['action'] == 'search_follow_mode':  # issue#425
                bot_message, reply_markup = manage_search_whiteness(
                    cur, user_id, got_callback, callback_query_id, callback_query, bot_token
                )

            elif got_callback and got_callback['action'] in [
                'search_follow_mode_on',
                'search_follow_mode_off',
            ]:  # issue#425
                bot_message = manage_search_follow_mode(
                    cur, user_id, got_callback, callback_query_id, callback_query, bot_token
                )
                reply_markup = reply_markup_main

            # Send summaries
            elif got_message in {
                b_view_latest_searches,
                b_view_act_searches,
                c_view_latest_searches,
                c_view_act_searches,
            }:
                msg_sent_by_specific_code = True

                temp_dict = {
                    b_view_latest_searches: 'all',
                    b_view_act_searches: 'active',
                    c_view_latest_searches: 'all',
                    c_view_act_searches: 'active',
                }

                cur.execute(
                    """
                    SELECT folder_id, folder_display_name FROM geo_folders_view WHERE folder_type='searches';
                    """
                )

                folders_list = cur.fetchall()

                if get_search_follow_mode(cur, user_id):
                    # issue#425 make inline keyboard - list of searches
                    keyboard = []  # to combine monolit ikb for all user's regions
                    ikb_searches_count = 0

                    region_name = ''
                    for region in user_regions:
                        for line in folders_list:
                            if line[0] == region:
                                region_name = line[1]
                                break

                        logging.info(f'Before if region_name.find...: {bot_message=}; {keyboard=}')
                        # check if region ‚Äì is an archive folder: if so ‚Äì it can be sent only to 'all'
                        if region_name.find('–∞–≤–µ—Ä—à') == -1 or temp_dict[got_message] == 'all':
                            new_region_ikb_list = compose_full_message_on_list_of_searches_ikb(
                                cur, temp_dict[got_message], user_id, region, region_name
                            )
                            keyboard.append(new_region_ikb_list)
                            ikb_searches_count += len(new_region_ikb_list) - 1  ##number of searches in the region
                            logging.info(f'After += compose_full_message_on_list_of_searches_ikb: {keyboard=}')

                    ##msg_sent_by_specific_code for combined ikb start
                    if ikb_searches_count == 0:
                        bot_message = '–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –í–∞—à–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –≤–∏–¥–æ–≤ –ø–æ–∏—Å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.'
                        params = {
                            'parse_mode': 'HTML',
                            'disable_web_page_preview': True,
                            'reply_markup': reply_markup,
                            'chat_id': user_id,
                            'text': bot_message,
                        }
                        context = f'{user_id=}, context_step=b1'
                        response = make_api_call('sendMessage', bot_token, params, context)
                        logging.info(f'{response=}; {user_id=}; context_step=b2')
                        result = process_response_of_api_call(user_id, response)
                        logging.info(f'{result=}; {user_id=}; context_step=b3')
                        inline_processing(cur, response, params)
                    else:
                        # issue#425 show the inline keyboard

                        ##TBD. May be will be useful to show quantity of marked searches
                        #                        searches_marked = 0
                        #                        for region_keyboard in keyboard:
                        #                            for ikb_line in region_keyboard:
                        #                                if ikb_line[0].get("callback_data") and not ikb_line[0]["text"][:1]=='  ':
                        #                                    searches_marked += 1

                        for i, region_keyboard in enumerate(keyboard):
                            if i == 0:
                                bot_message = """–ú–ï–ù–Æ –ê–ö–¢–£–ê–õ–¨–ù–´–• –ü–û–ò–°–ö–û–í –î–õ–Ø –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø.
–ö–∞–∂–¥—ã–π –ø–æ–∏—Å–∫ –Ω–∏–∂–µ –¥–∞–Ω —Å—Ç—Ä–æ–∫–æ–π –∏–∑ –ø–∞—Ä—ã –∫–Ω–æ–ø–æ–∫: –∫–Ω–æ–ø–∫–∞ –ø–æ–º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Ñ–æ—Ä—É–º.
üëÄ - –∑–Ω–∞–∫ –ø–æ–º–µ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–º–µ—á–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–∞–º. 
–ï—Å–ª–∏ —Ç–∞–∫–∏—Ö –Ω–µ—Ç, —Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ –≤—Å–µ–º –ø–æ–∏—Å–∫–∞–º —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.
‚ùå - –ø–æ–º–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è ("—á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫") - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ç–∞–∫–∏–º –ø–æ–∏—Å–∫–∞–º –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ."""
                            else:
                                bot_message = ''

                            # Pop region caption from the region_keyboard and put it into bot-message
                            bot_message += '\n' if len(bot_message) > 0 else ''
                            bot_message += (
                                f'<a href="{region_keyboard[0][0]["url"]}">{region_keyboard[0][0]["text"]}</a>'
                            )
                            region_keyboard.pop(0)

                            if i == (len(keyboard) - 1):
                                region_keyboard += [
                                    [
                                        {
                                            'text': '–û—Ç–∫–ª—é—á–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ–∏—Å–∫–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è',
                                            'callback_data': '{"action":"search_follow_mode_off"}',
                                        }
                                    ]
                                ]

                            reply_markup = InlineKeyboardMarkup(region_keyboard)
                            logging.info(f'{bot_message=}; {region_keyboard=}; context_step=b00')
                            # process_sending_message_async(user_id=user_id, data=data)
                            context = f'Before if reply_markup and not isinstance(reply_markup, dict): {reply_markup=}, context_step=b01'
                            logging.info(f'{context=}: {reply_markup=}')
                            if reply_markup and not isinstance(reply_markup, dict):
                                reply_markup = reply_markup.to_dict()
                                context = (
                                    f'After reply_markup.to_dict(): {reply_markup=}; {user_id=}; context_step=b02a'
                                )
                                logging.info(f'{context=}: {reply_markup=}')

                            params = {
                                'parse_mode': 'HTML',
                                'disable_web_page_preview': True,
                                'reply_markup': reply_markup,
                                'chat_id': user_id,
                                'text': bot_message,
                            }
                            context = f'{user_id=}, context_step=b1'
                            response = make_api_call('sendMessage', bot_token, params, context)
                            logging.info(f'{response=}; {user_id=}; context_step=b2')
                            result = process_response_of_api_call(user_id, response)
                            logging.info(f'{result=}; {user_id=}; context_step=b3')
                            inline_processing(cur, response, params)
                    ##msg_sent_by_specific_code for combined ikb end

                    # saving the last message from bot
                    try:
                        cur.execute("""DELETE FROM msg_from_bot WHERE user_id=%s;""", (user_id,))
                        cur.execute(
                            'INSERT INTO msg_from_bot (user_id, time, msg_type) values (%s, %s, %s);',
                            (user_id, datetime.datetime.now(), 'report'),
                        )
                    except Exception as e:
                        logging.info('failed to save the last message from bot')
                        logging.exception(e)

                else:
                    region_name = ''
                    for region in user_regions:
                        for line in folders_list:
                            if line[0] == region:
                                region_name = line[1]
                                break

                        # check if region ‚Äì is an archive folder: if so ‚Äì it can be sent only to 'all'
                        if region_name.find('–∞–≤–µ—Ä—à') == -1 or temp_dict[got_message] == 'all':
                            bot_message = compose_full_message_on_list_of_searches(
                                cur, temp_dict[got_message], user_id, region, region_name
                            )
                            reply_markup = reply_markup_main
                            data = {
                                'text': bot_message,
                                'reply_markup': reply_markup,
                                'parse_mode': 'HTML',
                                'disable_web_page_preview': True,
                            }
                            process_sending_message_async(user_id=user_id, data=data)

                            # saving the last message from bot
                            try:
                                cur.execute("""DELETE FROM msg_from_bot WHERE user_id=%s;""", (user_id,))
                                cur.execute(
                                    'INSERT INTO msg_from_bot (user_id, time, msg_type) values (%s, %s, %s);',
                                    (user_id, datetime.datetime.now(), 'report'),
                                )
                            except Exception as e:
                                logging.info('failed to save the last message from bot')
                                logging.exception(e)
                    # issue425 Button for turn on search following mode
                    try:
                        search_follow_mode_ikb = [
                            [
                                {
                                    'text': '–í–∫–ª—é—á–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ–∏—Å–∫–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è',
                                    'callback_data': '{"action":"search_follow_mode_on"}',
                                }
                            ]
                        ]
                        reply_markup = InlineKeyboardMarkup(search_follow_mode_ikb)
                        if reply_markup and not isinstance(reply_markup, dict):
                            reply_markup = reply_markup.to_dict()
                            context = f'After reply_markup.to_dict(): {reply_markup=}; {user_id=}; context_step=a00'
                            logging.info(f'{context=}: {reply_markup=}')
                        params = {
                            'parse_mode': 'HTML',
                            'disable_web_page_preview': True,
                            'reply_markup': reply_markup,
                            'chat_id': user_id,
                            'text': """–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –ø–æ–∏—Å–∫–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, 
—á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Å–æ –≤—Å–µ—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤, 
–∞ —Ç–æ–ª—å–∫–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –í–∞–º–∏.""",
                        }
                        context = f'{user_id=}, context_step=a01'
                        response = make_api_call('sendMessage', bot_token, params, context)
                        logging.info(f'{response=}; {user_id=}; context_step=a02')
                        result = process_response_of_api_call(user_id, response)
                        logging.info(f'{result=}; {user_id=}; context_step=a03')
                        inline_processing(cur, response, params)
                    except Exception as e:
                        logging.info('failed to show button for turn on search following mode')
                        logging.exception(e)

            # Perform individual replies

            # Admin mode
            elif got_message.lower() == b_admin_menu:
                bot_message = '–í—ã –≤–æ—à–ª–∏ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω-—Ä–∞–∑–¥–µ–ª'

                # keyboard for Home Coordinates sharing
                keyboard_coordinates_admin = [[b_back_to_start], [b_back_to_start]]
                reply_markup = ReplyKeyboardMarkup(keyboard_coordinates_admin, resize_keyboard=True)

            # FIXME - WIP
            elif got_message.lower() == b_test_menu:
                add_user_sys_role(cur, user_id, 'tester')
                bot_message = (
                    '–í—ã –≤ —Å–µ–∫—Ä–µ—Ç–Ω–æ–º —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–∞–∑–¥–µ–ª–µ, –≥–¥–µ –≤—Å—ë –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ —Ç–∞–∫ :) '
                    '–ï—Å–ª–∏ —á—Ç–æ ‚Äì –ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-—á–∞—Ç '
                    'https://t.me/joinchat/2J-kV0GaCgwxY2Ni'
                    '\nüí° –ê –µ—â–µ –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–æ–ª—å tester - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.'
                    '\n–î–ª—è –æ—Ç–∫–∞–∑–∞ –æ—Ç —Ä–æ–ª–∏ tester –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É notest'
                )
                # keyboard_coordinates_admin = [[b_set_topic_type], [b_back_to_start]]
                # [b_set_pref_urgency], [b_set_forum_nick]

                map_button = {'text': '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –ø–æ–∏—Å–∫–æ–≤', 'web_app': {'url': get_app_config().web_app_url_test}}
                keyboard = [[map_button]]
                reply_markup = InlineKeyboardMarkup(keyboard)
            # FIXME ^^^

            elif got_message.lower() == 'notest':
                delete_user_sys_role(cur, user_id, 'tester')
                bot_message = '–†–æ–ª—å tester —É–¥–∞–ª–µ–Ω–∞. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â–µ! :-) –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
                reply_markup = reply_markup_main

            ###            elif got_message.lower() == b_test_search_follow_mode_on: #issue425
            ###                set_search_follow_mode(cur, user_id, True)
            ###                bot_message = '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
            ###                reply_markup = reply_markup_main

            elif got_message.lower() == b_test_search_follow_mode_off:  ##remains for some time for emrgency case
                set_search_follow_mode(cur, user_id, False)
                bot_message = '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤ –≤–´–∫–ª—é—á–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
                reply_markup = reply_markup_main

            elif got_message in {b_map, c_map}:
                bot_message = (
                    '–í –ë–æ—Ç–µ –ü–æ–∏—Å–∫–æ–≤–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å üó∫Ô∏è–ö–∞—Ä—Ç—É –ü–æ–∏—Å–∫–æ–≤üìç.\n\n'
                    '–ù–∞ –∫–∞—Ä—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∏—Å–∫–∏, '
                    '–ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫ –∫–∞–∂–¥–æ–º—É –∏–∑ –Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–æ–∫, '
                    '–∞ —Ç–∞–∫–∂–µ –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö –Ø–Ω–¥–µ–∫—Å.\n\n'
                    '–ö–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n'
                    '–ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∏–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ, –∫–∞–∫ –µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ '
                    '–¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å ‚Äì –Ω–∞–ø–∏—à–∏—Ç–µ –≤ '
                    '<a href="https://t.me/joinchat/2J-kV0GaCgwxY2Ni">—á–∞—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤</a>.'
                    ''
                )

                map_button = {'text': '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –ø–æ–∏—Å–∫–æ–≤', 'web_app': {'url': get_app_config().web_app_url}}
                keyboard = [[map_button]]
                reply_markup = InlineKeyboardMarkup(keyboard)

            elif (
                got_message == b.set.topic_type.text
                or b.topic_types.contains(got_message)
                or (got_hash and b.topic_types.contains(got_hash))
            ):  # noqa
                callback_query_message_id = callback_query.message.id if callback_query else None
                bot_message, reply_markup = manage_topic_type(
                    cur, user_id, got_message, b, got_callback, callback_query_id, bot_token, callback_query_message_id
                )

            elif got_message in {
                b_set_pref_age,
                b_pref_age_0_6_act,
                b_pref_age_0_6_deact,
                b_pref_age_7_13_act,
                b_pref_age_7_13_deact,
                b_pref_age_14_20_act,
                b_pref_age_14_20_deact,
                b_pref_age_21_50_act,
                b_pref_age_21_50_deact,
                b_pref_age_51_80_act,
                b_pref_age_51_80_deact,
                b_pref_age_81_on_act,
                b_pref_age_81_on_deact,
            }:
                input_data = None if got_message == b_set_pref_age else got_message
                keyboard, first_visit = manage_age(cur, user_id, input_data)
                keyboard.append([b_back_to_start])
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

                if got_message.lower() == b_set_pref_age:
                    bot_message = (
                        '–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π '
                        '–≥—Ä—É–ø–ø–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë. –ù–∞—Å—Ç—Ä–æ–π–∫—É –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.'
                    )
                    if first_visit:
                        bot_message = (
                            '–î–∞–Ω–Ω–æ–µ –º–µ–Ω—é –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ë–í–ü '
                            '(–±–µ–∑ –≤–µ—Å—Ç–∏ –ø—Ä–æ–ø–∞–≤—à–∏—Ö), –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. '
                            '–í–∞–∂–Ω–æ, —á—Ç–æ –µ—Å–ª–∏ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –ë–í–ü, —Ç–æ–≥–¥–∞ –≤—ã '
                            '–≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n–¢–∞–∫–∂–µ –¥–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ '
                            '—Ä–∞–∑–¥–µ–ª—ã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ü–æ–∏—Å–∫–∏ –∏ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ü–æ–∏—Å–∫–∏ ‚Äì –≤ –Ω–∏—Ö –≤—ã –≤—Å—ë —Ç–∞–∫–∂–µ '
                            '—Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤.\n\n' + bot_message
                        )
                else:
                    bot_message = '–°–ø–∞—Å–∏–±–æ, –∑–∞–ø–∏—Å–∞–ª–∏.'

            elif (
                got_message in {b_set_pref_radius, b_pref_radius_act, b_pref_radius_deact, b_pref_radius_change}
                or bot_request_bfr_usr_msg == 'radius_input'
            ):
                bot_message, reply_markup, bot_request_aft_usr_msg = manage_radius(
                    cur,
                    user_id,
                    got_message,
                    b_set_pref_radius,
                    b_pref_radius_act,
                    b_pref_radius_deact,
                    b_pref_radius_change,
                    b_back_to_start,
                    b_set_pref_coords,
                    bot_request_bfr_usr_msg,
                )

            elif (
                got_message in {b_set_forum_nick, b_yes_its_me, b_no_its_not_me}
                or bot_request_bfr_usr_msg == 'input_of_forum_username'
            ):
                bot_message, reply_markup, bot_request_aft_usr_msg = manage_linking_to_forum(
                    cur,
                    got_message,
                    user_id,
                    b_set_forum_nick,
                    b_back_to_start,
                    bot_request_bfr_usr_msg,
                    b_admin_menu,
                    b_test_menu,
                    b_yes_its_me,
                    b_no_its_not_me,
                    b_settings,
                    reply_markup_main,
                )

            elif got_message == b_set_pref_urgency:
                bot_message = (
                    '–û—á–µ–Ω—å –º–Ω–æ–≥–∏–µ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∏ –ø–æ–ª—å–∑—É—é—Ç—Å—è —ç—Ç–∏–º –ë–æ—Ç–æ–º. –ü—Ä–∏ –ª—é–±–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π'
                    ' –ë–æ—Ç —Å—Ç–∞–≤–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å, –∏ –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è '
                    '—Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –¢–µ–ª–µ–≥—Ä–∞–º–∞. –ò–Ω–æ–≥–¥–∞, –≤ —Å–ª—É—á–∞–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö'
                    ' –±–æ–ª—å—à–∏—Ö –ø–æ–∏—Å–∫–æ–≤, –æ—á–µ—Ä–µ–¥—å –≤—ã—Ä–∞—Å—Ç–∞–µ—Ç –∏ –∫—Ç–æ-—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ '
                    '—Å—Ä–∞–∑—É, –∞ –∫–æ–º—É-—Ç–æ –æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π.\n'
                    '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–æ–ª–µ–µ "–Ω–∞—Ü–µ–ª–µ–Ω–Ω—ã–º–∏", –æ–±–æ–∑–Ω–∞—á–∏–≤ '
                    '—Å –∫–∞–∫–æ–π —Å—Ä–æ—á–Ω–æ—Å—Ç—å—é –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –ë–æ—Ç–∞. –í —Å–∫–æ–±–∫–∞—Ö '
                    '—É–∫–∞–∑–∞–Ω—ã –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Å—Ä–æ–∫–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —Ñ–æ—Ä—É–º–µ. '
                    '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –í–∞–º –≤–∞—Ä–∏–∞–Ω—Ç'
                )
                keyboard = [
                    [b_pref_urgency_highest],
                    [b_pref_urgency_high],
                    [b_pref_urgency_medium],
                    [b_pref_urgency_low],
                    [b_back_to_start],
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            # DEBUG: for debugging purposes only
            elif got_message.lower() == 'go':
                publish_to_pubsub(Topics.topic_notify_admin, 'test_admin_check')

            elif got_message in {b_other, c_other}:
                bot_message = (
                    '–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ 20 –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ–∏—Å–∫–∞–º, –ø–µ—Ä–µ–π—Ç–∏ –≤ '
                    '–∫–∞–Ω–∞–ª –ö–æ–º–º—ä—é–Ω–∏—Ç–∏ –∏–ª–∏ –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ù–æ–≤–∏—á–∫–∞ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å '
                    '–¥—É—à–µ–≤–Ω—ã–µ —Ñ–æ—Ç–æ —Å –ø–æ–∏—Å–∫–æ–≤'
                )
                reply_markup = ReplyKeyboardMarkup(keyboard_other, resize_keyboard=True)

            elif got_message in {b_menu_set_region, b_fed_dist_pick_other}:
                bot_message = update_and_download_list_of_regions(
                    cur, user_id, got_message, b_menu_set_region, b_fed_dist_pick_other
                )
                reply_markup = ReplyKeyboardMarkup(keyboard_fed_dist_set, resize_keyboard=True)

            elif got_message in dict_of_fed_dist:
                updated_regions = update_and_download_list_of_regions(
                    cur, user_id, got_message, b_menu_set_region, b_fed_dist_pick_other
                )
                bot_message = updated_regions
                reply_markup = ReplyKeyboardMarkup(dict_of_fed_dist[got_message], resize_keyboard=True)

            elif got_message in full_dict_of_regions:
                updated_regions = update_and_download_list_of_regions(
                    cur, user_id, got_message, b_menu_set_region, b_fed_dist_pick_other
                )
                bot_message = updated_regions
                keyboard = keyboard_fed_dist_set
                for fed_dist in dict_of_fed_dist:
                    for region in dict_of_fed_dist[fed_dist]:
                        if region[0] == got_message:
                            keyboard = dict_of_fed_dist[fed_dist]
                            break
                    else:
                        continue
                    break
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

                if onboarding_step_id == 20:  # "moscow_replied"
                    save_onboarding_step(user_id, username, 'region_set')
                    save_user_pref_topic_type(cur, user_id, 'default', user_role)

            elif got_message in {b_settings, c_settings}:
                bot_message = (
                    '–≠—Ç–æ —Ä–∞–∑–¥–µ–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–µ –¥–ª—è –≤–∞—Å '
                    '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä—ã—Ö '
                    '–±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ –º–µ—Å—Ç–∞ –ø–æ–∏—Å–∫–∞. –í—ã –≤ –ª—é–±–æ–π '
                    '–º–æ–º–µ–Ω—Ç —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.'
                )

                message_prefix = compose_msg_on_user_setting_fullness(cur, user_id)
                if message_prefix:
                    bot_message = f'{bot_message}\n\n{message_prefix}'

                keyboard_settings = [
                    [b_set_pref_notif_type],
                    [b_menu_set_region],
                    [b_set_topic_type],
                    [b_set_pref_coords],
                    [b_set_pref_radius],
                    [b_set_pref_age],
                    [b_set_forum_nick],
                    [b_back_to_start],
                ]  # #AK added b_set_forum_nick for issue #6
                reply_markup = ReplyKeyboardMarkup(keyboard_settings, resize_keyboard=True)

            elif got_message == b_set_pref_coords:
                bot_message = (
                    '–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ—Å–∏–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤'
                    ' (–¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ ‚Äì –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                    '–∫–Ω–æ–ø–∫—É —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç). '
                    '–ü—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ‚Äì –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ '
                    '—Ä–∞–∑—Ä–µ—à–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à—É —Ç–µ–∫—É—â—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é. '
                    '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è '
                    '–≤–∞—à–∏–º "–¥–æ–º–æ–º", –æ—Ç–∫—É–¥–∞ –±—É–¥—É—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ '
                    '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ –ø–æ–∏—Å–∫–æ–≤.'
                )
                keyboard_coordinates_1 = [
                    [b_coords_auto_def],
                    [b_coords_man_def],
                    [b_coords_check],
                    [b_coords_del],
                    [b_back_to_start],
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard_coordinates_1, resize_keyboard=True)

            elif got_message == b_coords_del:
                delete_user_coordinates(cur, user_id)
                bot_message = (
                    '–í–∞—à–∏ "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã" —É–¥–∞–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '
                    '–¥–æ –ø–æ–∏—Å–∫–æ–≤ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è.\n'
                    '–í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã". '
                    '–§—É–Ω–∫—Ü–∏—è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è '
                    '–Ω–æ—Å–∏–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ ‚Äì –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å '
                    '—Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º.'
                )
                keyboard_coordinates_1 = [[b_coords_auto_def], [b_coords_man_def], [b_coords_check], [b_back_to_start]]
                reply_markup = ReplyKeyboardMarkup(keyboard_coordinates_1, resize_keyboard=True)

            elif got_message == b_coords_man_def:
                bot_message = (
                    '–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞—à–µ–≥–æ –¥–æ–º–∞ –≤—Ä—É—á–Ω—É—é –≤ —Ç–µ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–æ—Å—Ç–æ '
                    '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ. –§–æ—Ä–º–∞—Ç: XX.XXX–•–•, XX.XXX–•–•, –≥–¥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ '
                    '–º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–º. –®–∏—Ä–æ—Ç–∞ (–ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ) –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É 30 '
                    '–∏ 80, –î–æ–ª–≥–æ—Ç–∞ (–≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ) ‚Äì –º–µ–∂–¥—É 10 –∏ 190.'
                )
                bot_request_aft_usr_msg = 'input_of_coords_man'
                reply_markup = ReplyKeyboardRemove()

            elif got_message == b_coords_check:
                lat, lon = show_user_coordinates(cur, user_id)
                if lat and lon:
                    bot_message = '–í–∞—à–∏ "–¥–æ–º–∞—à–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã" '
                    bot_message += generate_yandex_maps_place_link(lat, lon, 'coords')

                else:
                    bot_message = '–í–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é.'

                keyboard_coordinates_1 = [
                    [b_coords_auto_def],
                    [b_coords_man_def],
                    [b_coords_check],
                    [b_coords_del],
                    [b_back_to_start],
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard_coordinates_1, resize_keyboard=True)

            elif got_message == b_back_to_start:
                bot_message = '–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                reply_markup = reply_markup_main

            elif got_message == b_goto_community:
                bot_message = (
                    '–ë–æ—Ç –º–æ–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å —Å —Å–æ–æ—Ç—Ä—è–¥–Ω–∏–∫–∞–º–∏ –≤ '
                    '<a href="https://t.me/joinchat/2J-kV0GaCgwxY2Ni">–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –ß–∞—Ç–µ '
                    '–≤ —Ç–µ–ª–µ–≥—Ä–∞–º</a>. –¢–∞–º –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ –∏–¥–µ–∏, —É–∫–∞–∑–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã '
                    '–∏ –ø–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.'
                )
                keyboard_other = [[b_view_latest_searches], [b_goto_first_search], [b_goto_photos], [b_back_to_start]]
                reply_markup = ReplyKeyboardMarkup(keyboard_other, resize_keyboard=True)

            elif got_message == b_goto_first_search:
                bot_message = (
                    '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –¥–æ–±—Ä–æ–≤–æ–ª—å—Ü–µ–º –î–ü–°–û ¬´–õ–∏–∑–∞–ê–ª–µ—Ä—Ç¬ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                    '<a href="https://lizaalert.org/forum/viewtopic.php?t=56934">'
                    '–ø–æ—Å–µ—Ç–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–æ—Ä—É–º–∞</a>, —Ç–∞–º –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π '
                    '–¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ –∏ –∑–∞–¥–∞—Ç—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã.'
                    '–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤–∏—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É –ø–µ—Ä–≤–æ–º—É –ø–æ–∏—Å–∫—É ‚Äì –ø—Ä–∏–≥–ª–∞—à–∞–µ–º '
                    '<a href="https://xn--b1afkdgwddgp9h.xn--p1ai/">–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Å–Ω–æ–≤–∞–º–∏ '
                    '—Ä–∞–±–æ—Ç—ã –õ–ê</a>. –í—Å—é —Ç–µ–æ—Ä–∏—é —Ä–∞–±–æ—Ç—ã –õ–ê –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ '
                    '–æ–±—É—á–µ–Ω–Ω—ã—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –õ–ê. –ù–æ –µ—Å–ª–∏ —É –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π—Ç–∏ '
                    '–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –∞ –≤—ã —É–∂–µ –≥–æ—Ç–æ–≤—ã –≤—ã–µ—Ö–∞—Ç—å –Ω–∞ –ø–æ–∏—Å–∫ ‚Äì —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å '
                    '–¥–ª—è –≤–∞—Å.'
                )
                keyboard_other = [[b_view_latest_searches], [b_goto_community], [b_goto_photos], [b_back_to_start]]
                reply_markup = ReplyKeyboardMarkup(keyboard_other, resize_keyboard=True)

            elif got_message == b_goto_photos:
                bot_message = (
                    '–ï—Å–ª–∏ –≤–∞–º —Ö–æ—á–µ—Ç—Å—è –æ–∫—É–Ω—É—Ç—å—Å—è –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –ü–°–†, –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –≤ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π '
                    '<a href="https://t.me/+6LYNNEy8BeI1NGUy">—Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —Ñ–æ—Ç–æ —Å '
                    '–ø–æ–∏—Å–∫–æ–≤</a>. –í—Å–µ —Ñ–æ—Ç–æ ‚Äì —Å–¥–µ–ª–∞–Ω—ã –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞–º–∏ –≤–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö –ü–°–†.'
                )
                keyboard_other = [
                    [b_view_latest_searches],
                    [b_goto_community],
                    [b_goto_first_search],
                    [b_back_to_start],
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard_other, resize_keyboard=True)

            # special block for flexible menu on notification preferences
            elif got_message in {
                b_act_all,
                b_deact_all,
                b_act_new_search,
                b_act_stat_change,
                b_act_titles,
                b_act_all_comments,
                b_set_pref_notif_type,
                b_deact_stat_change,
                b_deact_all_comments,
                b_deact_new_search,
                b_act_inforg_com,
                b_deact_inforg_com,
                b_act_field_trips_new,
                b_deact_field_trips_new,
                b_act_field_trips_change,
                b_deact_field_trips_change,
                b_act_coords_change,
                b_deact_coords_change,
                b_act_first_post_change,
                b_deact_first_post_change,
            }:
                # save preference for +ALL
                if got_message == b_act_all:
                    bot_message = (
                        '–°—É–ø–µ—Ä! —Ç–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –≤ —Å–ª—É—á–∞—è—Ö: '
                        '–ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞ (—Å—Ç–æ–ø, –ù–ñ, –ù–ü), '
                        '–ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –≤—Å–µ–º –ø–æ–∏—Å–∫–∞–º. –í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç '
                        '–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
                    )
                    save_preference(cur, user_id, 'all')

                # save preference for -ALL
                elif got_message == b_deact_all:
                    bot_message = '–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∏–ø—ã –ø–æ–ª—É—á–∞–µ–º—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–æ–ª–µ–µ –≥–∏–±–∫–æ'
                    save_preference(cur, user_id, '-all')

                # save preference for +NEW SEARCHES
                elif got_message == b_act_new_search:
                    bot_message = (
                        '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –ø—Ä–∏ '
                        '–ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞. –í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å '
                        '—Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
                    )
                    save_preference(cur, user_id, 'new_searches')

                # save preference for -NEW SEARCHES
                elif got_message == b_deact_new_search:
                    bot_message = '–ó–∞–ø–∏—Å–∞–ª–∏'
                    save_preference(cur, user_id, '-new_searches')

                # save preference for +STATUS UPDATES
                elif got_message == b_act_stat_change:
                    bot_message = (
                        '–û—Ç–ª–∏—á–Ω–æ! —Ç–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –ø—Ä–∏ '
                        '–∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–æ–≤ (–ù–ñ, –ù–ü, –°–¢–û–ü –∏ —Ç.–ø.). –í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç '
                        '–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
                    )
                    save_preference(cur, user_id, 'status_changes')

                # save preference for -STATUS UPDATES
                elif got_message == b_deact_stat_change:
                    bot_message = '–ó–∞–ø–∏—Å–∞–ª–∏'
                    save_preference(cur, user_id, '-status_changes')

                # save preference for TITLE UPDATES
                elif got_message == b_act_titles:
                    bot_message = '–û—Ç–ª–∏—á–Ω–æ!'
                    save_preference(cur, user_id, 'title_changes')

                # save preference for +COMMENTS
                elif got_message == b_act_all_comments:
                    bot_message = (
                        '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—Å–µ –Ω–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç —É –≤–∞—Å! –í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç '
                        '–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
                    )
                    save_preference(cur, user_id, 'comments_changes')

                # save preference for -COMMENTS
                elif got_message == b_deact_all_comments:
                    bot_message = (
                        '–ó–∞–ø–∏—Å–∞–ª–∏. –ú—ã —Ç–æ–ª—å–∫–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –≤–∞–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ '
                        '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ò–Ω—Ñ–æ—Ä–≥–∞. –ò—Ö —Ç–æ–∂–µ –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å'
                    )
                    save_preference(cur, user_id, '-comments_changes')

                # save preference for +InforgComments
                elif got_message == b_act_inforg_com:
                    bot_message = (
                        '–ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤—Å–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º, —Ç–æ —Ç–µ–ø–µ—Ä—å '
                        '–≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –æ—Ç –ò–Ω—Ñ–æ—Ä–≥–∞. –ï—Å–ª–∏ –∂–µ –≤—ã '
                        '—É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚Äì —Ç–æ –≤—Å—ë –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: –±–æ—Ç '
                        '—É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –ø–æ –≤—Å–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º, –≤–∫–ª—é—á–∞—è –æ—Ç –ò–Ω—Ñ–æ—Ä–≥–∞'
                    )
                    save_preference(cur, user_id, 'inforg_comments')

                # save preference for -InforgComments
                elif got_message == b_deact_inforg_com:
                    bot_message = '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –Ω–æ–≤—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º –æ—Ç –ò–Ω—Ñ–æ—Ä–≥–∞'
                    save_preference(cur, user_id, '-inforg_comments')

                # save preference for +FieldTripsNew
                elif got_message == b_act_field_trips_new:
                    bot_message = (
                        '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤—ã–µ–∑–¥–∞—Ö –ø–æ —É–∂–µ –∏–¥—É—â–∏–º '
                        '–ø–æ–∏—Å–∫–∞–º. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –Ω–æ–≤—ã–º —Ç–µ–º–∞–º –Ω–∞ '
                        '—Ñ–æ—Ä—É–º–µ, –∞ –∏–º–µ–Ω–Ω–æ –æ —Ç–æ–º, —á—Ç–æ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–µ–º–µ –≤ –ü–ï–†–í–û–ú –ø–æ—Å—Ç–µ '
                        '–ø–æ—è–≤–∏–ª–∞—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–º –≤—ã–µ–∑–¥–µ'
                    )
                    save_preference(cur, user_id, 'field_trips_new')

                # save preference for -FieldTripsNew
                elif got_message == b_deact_field_trips_new:
                    bot_message = '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –Ω–æ–≤—ã–º –≤—ã–µ–∑–¥–∞–º'
                    save_preference(cur, user_id, '-field_trips_new')

                # save preference for +FieldTripsChange
                elif got_message == b_act_field_trips_change:
                    bot_message = (
                        '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–ª—é—á–µ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –ø—Ä–∏ '
                        '–≤—ã–µ–∑–¥–∞—Ö, –≤ —Ç.—á. –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–µ–∑–¥–∞. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, '
                        '—á—Ç–æ —ç—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç—Ä–∞–∂–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –ü–ï–†–í–û–ú –ø–æ—Å—Ç–µ –ø–æ–∏—Å–∫–∞.'
                    )
                    save_preference(cur, user_id, 'field_trips_change')

                # save preference for -FieldTripsChange
                elif got_message == b_deact_field_trips_change:
                    bot_message = '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –≤—ã–µ–∑–¥–æ–≤'
                    save_preference(cur, user_id, '-field_trips_change')

                # save preference for +CoordsChange
                elif got_message == b_act_coords_change:
                    bot_message = (
                        '–ï—Å–ª–∏ —É —à—Ç–∞–±–∞ –ø–æ–º–µ–Ω—è—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–∏ –æ–± —ç—Ç–æ–º –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ –ø–µ—Ä–≤–æ–º '
                        '–ø–æ—Å—Ç–µ –Ω–∞ —Ñ–æ—Ä—É–º–µ) ‚Äì –±–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ–± —ç—Ç–æ–º'
                    )
                    save_preference(cur, user_id, 'coords_change')

                # save preference for -CoordsChange
                elif got_message == b_deact_coords_change:
                    bot_message = '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–º–µ–Ω–µ –º–µ—Å—Ç–∞ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç) —à—Ç–∞–±–∞'
                    save_preference(cur, user_id, '-coords_change')

                # save preference for -FirstPostChanges
                elif got_message == b_act_first_post_change:
                    bot_message = (
                        '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ü–µ—Ä–≤–æ–º –ü–æ—Å—Ç–µ'
                        ' –ò–Ω—Ñ–æ—Ä–≥–∞, –≥–¥–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–∏—Å–∫–∞'
                    )
                    save_preference(cur, user_id, 'first_post_changes')

                # save preference for -FirstPostChanges
                elif got_message == b_deact_first_post_change:
                    bot_message = (
                        '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ü–µ—Ä–≤–æ–º –ü–æ—Å—Ç–µ'
                        ' –ò–Ω—Ñ–æ—Ä–≥–∞ c –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–∏—Å–∫–∞'
                    )
                    save_preference(cur, user_id, '-first_post_changes')

                # GET what are preferences
                elif got_message == b_set_pref_notif_type:
                    prefs = compose_user_preferences_message(cur, user_id)
                    if prefs[0] == '–ø–æ–∫–∞ –Ω–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' or prefs[0] == '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞':
                        bot_message = '–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç—å'
                    else:
                        bot_message = '–°–µ–π—á–∞—Å —É –≤–∞—Å –≤–∫–ª—é—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∏–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n'
                        bot_message += prefs[0]

                else:
                    bot_message = 'empty message'

                if got_message == b_act_all:
                    keyboard_notifications_flexible = [[b_deact_all], [b_back_to_start]]
                elif got_message == b_deact_all:
                    keyboard_notifications_flexible = [
                        [b_act_all],
                        [b_deact_new_search],
                        [b_deact_stat_change],
                        [b_act_all_comments],
                        [b_deact_inforg_com],
                        [b_deact_first_post_change],
                        [b_back_to_start],
                    ]
                else:
                    # getting the list of user notification preferences
                    prefs = compose_user_preferences_message(cur, user_id)
                    keyboard_notifications_flexible = [
                        [b_act_all],
                        [b_act_new_search],
                        [b_act_stat_change],
                        [b_act_all_comments],
                        [b_act_inforg_com],
                        [b_act_first_post_change],
                        [b_back_to_start],
                    ]

                    for line in prefs[1]:
                        if line == 'all':
                            keyboard_notifications_flexible = [[b_deact_all], [b_back_to_start]]
                        elif line == 'new_searches':
                            keyboard_notifications_flexible[1] = [b_deact_new_search]
                        elif line == 'status_changes':
                            keyboard_notifications_flexible[2] = [b_deact_stat_change]
                        elif line == 'comments_changes':
                            keyboard_notifications_flexible[3] = [b_deact_all_comments]
                        elif line == 'inforg_comments':
                            keyboard_notifications_flexible[4] = [b_deact_inforg_com]
                        elif line == 'first_post_changes':
                            keyboard_notifications_flexible[5] = [b_deact_first_post_change]

                reply_markup = ReplyKeyboardMarkup(keyboard_notifications_flexible, resize_keyboard=True)

            # in case of other user messages:
            else:
                # If command in unknown
                bot_message = (
                    '–Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ ' '–∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–∏–∂–µ'
                )
                reply_markup = reply_markup_main

            if not msg_sent_by_specific_code:
                # FIXME ‚Äì 17.11.2023 ‚Äì migrating from async to pure api call
                """
                admin_id = get_app_config().my_telegram_id
                if user_id != admin_id:
                    data = {'text': bot_message, 'reply_markup': reply_markup,
                            'parse_mode': 'HTML', 'disable_web_page_preview': True}
                    process_sending_message_async(user_id=user_id, data=data)
                else:"""

                context_step = '01a1'
                context = f'if reply_markup and not isinstance(reply_markup, dict): {reply_markup=}, {context_step=}'
                logging.info(f'{context=}: {reply_markup=}')
                if reply_markup and not isinstance(reply_markup, dict):
                    reply_markup = reply_markup.to_dict()
                    context_step = '02a1'
                    context = f'After reply_markup.to_dict(): {reply_markup=}, {context_step=}'
                    logging.info(f'{context=}: {reply_markup=}')

                if got_hash and got_callback and got_callback['action'] != 'about':
                    user_used_inline_button = True
                else:
                    user_used_inline_button = False

                if user_used_inline_button:
                    # call editMessageText to edit inline keyboard
                    # in the message where inline button was pushed
                    last_user_message_id = callback_query.message.id  ##was get_last_user_inline_dialogue(cur, user_id)
                    logging.info(f'{last_user_message_id=}')
                    # params['message_id'] = last_user_message_id
                    params = {
                        'chat_id': user_id,
                        'text': bot_message,
                        'message_id': last_user_message_id,
                        'reply_markup': reply_markup,
                    }
                    context_step = '1a1'
                    context = f'main() if user_used_inline_button: {user_id=}, {context_step=}'
                    response = make_api_call('editMessageText', bot_token, params, context)
                    context_step = '1a2'
                    context = f'main() if user_used_inline_button: {user_id=}, {context_step=}'
                    logging.info(f'{response=}; {context=}')

                else:
                    params = {
                        'parse_mode': 'HTML',
                        'disable_web_page_preview': True,
                        'reply_markup': reply_markup,
                        'chat_id': user_id,
                        'text': bot_message,
                    }
                    context_step = '1b1'
                    context = f'main() if user_used_inline_button: else: {user_id=}, {context_step=}'
                    response = make_api_call('sendMessage', bot_token, params, context)
                    context_step = '1b2'
                    context = f'main() if user_used_inline_button: else: {user_id=}, {context_step=}'
                    logging.info(f'{response=}; {context=}')

                context_step = '2'
                context = f'main() after if user_used_inline_button: {user_id=}, {context_step=}'
                logging.info(f'{response=}; {context=}')
                context_step = '3'
                context = f'main() after if user_used_inline_button: {user_id=}, {context_step=}'
                result = process_response_of_api_call(user_id, response)
                inline_processing(cur, response, params)

                logging.info(f'RESPONSE {response}')
                logging.info(f'RESULT {result}')
                # FIXME ^^^

            # saving the last message from bot
            if not bot_request_aft_usr_msg:
                bot_request_aft_usr_msg = 'not_defined'

            try:
                cur.execute("""DELETE FROM msg_from_bot WHERE user_id=%s;""", (user_id,))

                cur.execute(
                    """
                    INSERT INTO msg_from_bot (user_id, time, msg_type) values (%s, %s, %s);
                    """,
                    (user_id, datetime.datetime.now(), bot_request_aft_usr_msg),
                )

            except Exception as e:
                logging.info(f'failed updates of table msg_from_bot for user={user_id}')
                logging.exception(e)

        # all other cases when bot was not able to understand the message from user
        else:
            logging.info('DBG.C.6. THERE IS a COMM SCRIPT INVOCATION w/O MESSAGE:')
            logging.info(str(update))
            text_for_admin = (
                f'[comm]: Empty message in Comm, user={user_id}, username={username}, '
                f'got_message={got_message}, update={update}, '
                f'bot_request_bfr_usr_msg={bot_request_bfr_usr_msg}'
            )
            logging.info(text_for_admin)
            notify_admin(text_for_admin)

    except Exception as e:
        logging.info('GENERAL COMM CRASH:')
        logging.exception(e)
        notify_admin('[comm] general script fail')

    if bot_message:
        save_bot_reply_to_user(cur, user_id, bot_message)

    cur.close()
    conn_psy.close()

    return 'finished successfully. in was a regular conversational message'
