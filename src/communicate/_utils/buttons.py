import hashlib
from typing import Any, Dict

full_buttons_dict = {
    'topic_types': {
        'regular': {'text': '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∏—Å–∫–∏', 'id': 0},
        'resonance': {'text': '—Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω—ã–µ –ø–æ–∏—Å–∫–∏', 'id': 5, 'hide': False},
        'info_support': {'text': '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'id': 4, 'hide': False},
        'reverse': {'text': '–æ–±—Ä–∞—Ç–Ω—ã–µ –ø–æ–∏—Å–∫–∏', 'id': 1},
        'training': {'text': '—É—á–µ–±–Ω—ã–µ –ø–æ–∏—Å–∫–∏', 'id': 3},
        'patrol': {'text': '–Ω–æ—á–Ω–æ–π –ø–∞—Ç—Ä—É–ª—å', 'id': 2, 'hide': False},
        'event': {'text': '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', 'id': 10},
        'info': {'text': '–ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'id': 20, 'hide': True},
        'about': {'text': 'üí° —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø–æ–∏—Å–∫–æ–≤ üí°', 'id': None},
    },
    'roles': {
        'member': {'text': '—è —Å–æ—Å—Ç–æ—é –≤ –õ–∏–∑–∞–ê–ª–µ—Ä—Ç', 'id': 'member'},
        'new_member': {'text': '—è —Ö–æ—á—É –ø–æ–º–æ–≥–∞—Ç—å –õ–∏–∑–∞–ê–ª–µ—Ä—Ç', 'id': 'new_member'},
        'relative': {'text': '—è –∏—â—É —á–µ–ª–æ–≤–µ–∫–∞', 'id': 'relative'},
        'other': {'text': '—É –º–µ–Ω—è –¥—Ä—É–≥–∞—è –∑–∞–¥–∞—á–∞', 'id': 'other'},
        'no_answer': {'text': '–Ω–µ —Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å', 'id': 'no_answer'},
        'about': {'text': 'üí° —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–æ–ª—è–º üí°', 'id': None},
    },
    'set': {'topic_type': {'text': '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∏–¥ –ø–æ–∏—Å–∫–æ–≤', 'id': 'topic_type'}},
    'core': {'to_start': {'text': '–≤ –Ω–∞—á–∞–ª–æ', 'id': 'to_start'}},
}


def search_button_row_ikb(search_following_mode, search_status, search_id, search_display_name, url):
    search_following_mark = search_following_mode if search_following_mode else '  '
    ikb_row = [
        [
            {
                'text': f'{search_following_mark} {search_status}',
                'callback_data': f'{{"action":"search_follow_mode", "hash":"{search_id}"}}',
            },  ##left button to on/off follow
            {'text': search_display_name, 'url': url},  ##right button - link to the search on the forum
        ]
    ]
    return ikb_row


class GroupOfButtons:
    """Contains the set of unique buttons of the similar nature (to be shown together as alternatives)"""

    def __init__(
        self,
        button_dict,
        modifier_dict=None,
    ):
        self.modifier_dict = modifier_dict

        all_button_texts = []
        all_button_hashes = []
        for key, value in button_dict.items():
            setattr(self, key, Button(value, modifier_dict))
            all_button_texts += self.__getattribute__(key).any_text
            all_button_hashes.append(self.__getattribute__(key).hash)
        self.any_text = all_button_texts
        self.any_hash = all_button_hashes

    def __str__(self):
        return self.any_text

    def contains(self, check: str) -> bool:
        """Check is the given text/hash is used for any button in this group"""

        if check in self.any_text:
            return True

        if check in self.any_hash:
            return True

        return False

    def temp_all_keys(self):
        return [k for k, v in self.__dict__.items()]

    def id(self, given_id):
        """Return a Button which correspond to the given id"""
        for key, value in self.__dict__.items():
            if not value:
                continue
            if hasattr(value, 'id') and value.id == given_id:
                return value
        return None

    def keyboard(self, act_list, change_list):
        """Generate a list of telegram buttons (2D array) basing on existing setting list and one that should change"""

        keyboard = []
        for key, value in self.__dict__.items():
            curr_button = self.__getattribute__(key)
            if key in {'modifier_dict', 'any_text', 'any_hash'}:
                continue
            if hasattr(value, 'hide') and value.hide:
                continue
            curr_button_is_in_existing_id_list = False
            curr_button_is_asked_to_change = False
            for id_item in act_list:
                if curr_button.id == id_item:
                    curr_button_is_in_existing_id_list = True
                    break
            for id_item in change_list:
                if curr_button.id == id_item:
                    curr_button_is_asked_to_change = True
                    break

            if curr_button_is_in_existing_id_list and key not in {'about'}:
                if not curr_button_is_asked_to_change:
                    keyboard += [
                        {'text': curr_button.on, 'callback_data': f'{{"action":"off","hash": "{curr_button.hash}"}}'}
                    ]
                else:
                    keyboard += [
                        {'text': curr_button.off, 'callback_data': f'{{"action":"on","hash": "{curr_button.hash}"}}'}
                    ]
            elif key not in {'about'}:
                if not curr_button_is_asked_to_change:
                    keyboard += [
                        {'text': curr_button.off, 'callback_data': f'{{"action":"on","hash": "{curr_button.hash}"}}'}
                    ]
                else:
                    keyboard += [
                        {'text': curr_button.on, 'callback_data': f'{{"action":"off","hash": "{curr_button.hash}"}}'}
                    ]
            else:  # case for 'about' button
                keyboard += [
                    {'text': curr_button.text, 'callback_data': f'{{"action":"about","hash": "{curr_button.hash}"}}'}
                ]

        keyboard = [[k] for k in keyboard]

        return keyboard

    def button_by_text(self, given_text):
        """Return a Button which correspond to the given text"""
        for key, value in self.__dict__.items():
            if not value:
                continue
            if hasattr(value, 'any_text') and given_text in value.any_text:
                return value
        return None

    def button_by_hash(self, given_hash):
        """Return a Button which correspond to the given hash"""
        for key, value in self.__dict__.items():
            if not value:
                continue
            if hasattr(value, 'hash') and given_hash == value.hash:
                return value
        return None


class AllButtons:
    def __init__(self, initial_dict):
        for key, value in initial_dict.items():
            setattr(self, key, GroupOfButtons(value))

    def temp_all_keys(self):
        return [k for k, v in self.__dict__.items()]


class Button:
    """Contains one unique button and all the associated attributes"""

    def __init__(self, data: Dict[str, Any] = None, modifier=None):
        if modifier is None:
            modifier = {'on': '‚úÖ ', 'off': '‚òê '}  # standard modifier

        self.modifier = modifier
        self.data = data
        self.text = None
        for key, value in self.data.items():
            setattr(self, key, value)
        self.hash = hashlib.shake_128(self.text.encode('utf-8')).hexdigest(4)  # noqa

        self.any_text = [self.text]
        for key, value in modifier.items():
            new_value = f'{value}{self.text}'
            setattr(self, key, new_value)
            self.any_text.append(new_value)

        self.all = [v for k, v in self.__dict__.items() if v != modifier]

    def __str__(self):
        return self.text

    def temp_all_keys(self):
        return [k for k, v in self.__dict__.items()]


c_start = '/start'
b_back_to_start = '–≤ –Ω–∞—á–∞–ª–æ'
b_fed_dist_pick_other = '–≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –û–∫—Ä—É–≥'


# Settings - Dalnevostochniy Fed Dist - Regions
b_reg_buryatiya = '–ë—É—Ä—è—Ç–∏—è'
b_reg_prim_kray = '–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π'
b_reg_habarovsk = '–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π –∫—Ä–∞–π'
b_reg_amur = '–ê–º—É—Ä—Å–∫–∞—è –æ–±–ª.'
b_reg_dal_vost_other = '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –î–§–û'
keyboard_dal_vost_reg_choice = [
    [b_reg_buryatiya],
    [b_reg_prim_kray],
    [b_reg_habarovsk],
    [b_reg_amur],
    [b_reg_dal_vost_other],
    [b_fed_dist_pick_other],
    [b_back_to_start],
]

# Settings - Privolzhskiy Fed Dist - Regions
b_reg_bashkorkostan = '–ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω'
b_reg_kirov = '–ö–∏—Ä–æ–≤—Å–∫–∞—è –æ–±–ª.'
b_reg_mariy_el = '–ú–∞—Ä–∏–π –≠–ª'
b_reg_mordovia = '–ú–æ—Ä–¥–æ–≤–∏—è'
b_reg_nizhniy = '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª.'
b_reg_orenburg = '–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª.'
b_reg_penza = '–ü–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª.'
b_reg_perm = '–ü–µ—Ä–º—Å–∫–∏–π –∫—Ä–∞–π'
b_reg_samara = '–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª.'
b_reg_saratov = '–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª.'
b_reg_tatarstan = '–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω'
b_reg_udmurtiya = '–£–¥–º—É—Ä—Ç–∏—è'
b_reg_ulyanovsk = '–£–ª—å—è–Ω–æ–≤—Å–∫–∞—è –æ–±–ª.'
b_reg_chuvashiya = '–ß—É–≤–∞—à–∏—è'
b_reg_privolz_other = '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –ü–§–û'
keyboard_privolz_reg_choice = [
    [b_reg_bashkorkostan],
    [b_reg_kirov],
    [b_reg_mariy_el],
    [b_reg_mordovia],
    [b_reg_nizhniy],
    [b_reg_orenburg],
    [b_reg_penza],
    [b_reg_perm],
    [b_reg_samara],
    [b_reg_saratov],
    [b_reg_tatarstan],
    [b_reg_udmurtiya],
    [b_reg_ulyanovsk],
    [b_reg_chuvashiya],
    [b_reg_privolz_other],
    [b_fed_dist_pick_other],
    [b_back_to_start],
]


# Settings - Severo-Kavkazskiy Fed Dist - Regions
b_reg_dagestan = '–î–∞–≥–µ—Å—Ç–∞–Ω'
b_reg_stavropol = '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π'
b_reg_chechnya = '–ß–µ—á–Ω—è'
b_reg_kabarda = '–ö–∞–±–∞—Ä–¥–∏–Ω–æ-–ë–∞–ª–∫–∞—Ä–∏—è'
b_reg_ingushetia = '–ò–Ω–≥—É—à–µ—Ç–∏—è'
b_reg_sev_osetia = '–°–µ–≤–µ—Ä–Ω–∞—è –û—Å–µ—Ç–∏—è'
b_reg_sev_kav_other = '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –°–ö–§–û'
keyboard_sev_kav_reg_choice = [
    [b_reg_dagestan],
    [b_reg_stavropol],
    [b_reg_chechnya],
    [b_reg_kabarda],
    [b_reg_ingushetia],
    [b_reg_sev_osetia],
    [b_reg_sev_kav_other],
    [b_fed_dist_pick_other],
    [b_back_to_start],
]

# Settings - Severo-Zapadniy Fed Dist - Regions
b_reg_vologda = '–í–æ–ª–æ–≥–æ–¥—Å–∫–∞—è –æ–±–ª.'
b_reg_karelia = '–ö–∞—Ä–µ–ª–∏—è'
b_reg_komi = '–ö–æ–º–∏'
b_reg_piter = '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª.'
b_reg_murmansk = '–ú—É—Ä–º–∞–Ω—Å–∫–∞—è –æ–±–ª.'
b_reg_pskov = '–ü—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª.'
b_reg_archangelsk = '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∞—è –æ–±–ª.'
b_reg_sev_zap_other = '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –°–ó–§–û'
keyboard_sev_zap_reg_choice = [
    [b_reg_vologda],
    [b_reg_komi],
    [b_reg_karelia],
    [b_reg_piter],
    [b_reg_murmansk],
    [b_reg_pskov],
    [b_reg_archangelsk],
    [b_reg_sev_zap_other],
    [b_fed_dist_pick_other],
    [b_back_to_start],
]


# Settings - Sibirskiy Fed Dist - Regions
b_reg_altay = '–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π'
b_reg_irkutsk = '–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª.'
b_reg_kemerovo = '–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª.'
b_reg_krasnoyarsk = '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π'
b_reg_novosib = '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª.'
b_reg_omsk = '–û–º—Å–∫–∞—è –æ–±–ª.'
b_reg_tomsk = '–¢–æ–º—Å–∫–∞—è –æ–±–ª.'
b_reg_hakasiya = '–•–∞–∫–∞—Å–∏—è'
b_reg_sibiria_reg_other = '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –°–§–û'
keyboard_sibiria_reg_choice = [
    [b_reg_altay],
    [b_reg_irkutsk],
    [b_reg_kemerovo],
    [b_reg_krasnoyarsk],
    [b_reg_novosib],
    [b_reg_omsk],
    [b_reg_tomsk],
    [b_reg_hakasiya],
    [b_reg_sibiria_reg_other],
    [b_fed_dist_pick_other],
    [b_back_to_start],
]


# Settings - Uralskiy Fed Dist - Regions
b_reg_ekat = '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª.'
b_reg_kurgan = '–ö—É—Ä–≥–∞–Ω—Å–∫–∞—è –æ–±–ª.'
b_reg_tyumen = '–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª.'
b_reg_hanty_mansi = '–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∏–π –ê–û'
b_reg_chelyabinks = '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª.'
b_reg_yamal = '–Ø–º–∞–ª–æ-–ù–µ–Ω–µ—Ü–∫–∏–π –ê–û'
b_reg_urals_reg_other = '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –£–§–û'
keyboard_urals_reg_choice = [
    [b_reg_ekat],
    [b_reg_kurgan],
    [b_reg_tyumen],
    [b_reg_hanty_mansi],
    [b_reg_chelyabinks],
    [b_reg_yamal],
    [b_reg_urals_reg_other],
    [b_fed_dist_pick_other],
    [b_back_to_start],
]


# Settings - Central Fed Dist - Regions
b_reg_belogorod = '–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª.'
b_reg_bryansk = '–ë—Ä—è–Ω—Å–∫–∞—è –æ–±–ª.'
b_reg_vladimir = '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª.'
b_reg_voronezh = '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª.'
b_reg_ivanovo = '–ò–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª.'
b_reg_kaluga = '–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª.'
b_reg_kostroma = '–ö–æ—Å—Ç—Ä–æ–º—Å–∫–∞—è –æ–±–ª.'
b_reg_kursk = '–ö—É—Ä—Å–∫–∞—è –æ–±–ª.'
b_reg_lipetsk = '–õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª.'
b_reg_msk_act = '–ú–æ—Å–∫–≤–∞ –∏ –ú–û: –ê–∫—Ç–∏–≤–Ω—ã–µ –ü–æ–∏—Å–∫–∏'
b_reg_msk_inf = '–ú–æ—Å–∫–≤–∞ –∏ –ú–û: –ò–Ω—Ñ–æ –ü–æ–¥–¥–µ—Ä–∂–∫–∞'
b_reg_orel = '–û—Ä–ª–æ–≤—Å–∫–∞—è –æ–±–ª.'
b_reg_ryazan = '–†—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª.'
b_reg_smolensk = '–°–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª.'
b_reg_tambov = '–¢–∞–º–±–æ–≤—Å–∫–∞—è –æ–±–ª.'
b_reg_tver = '–¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª.'
b_reg_tula = '–¢—É–ª—å—Å–∫–∞—è –æ–±–ª.'
b_reg_yaroslavl = '–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª.'
b_reg_central_reg_other = '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –¶–§–û'
keyboard_central_reg_choice = [
    [b_reg_belogorod],
    [b_reg_bryansk],
    [b_reg_vladimir],
    [b_reg_voronezh],
    [b_reg_ivanovo],
    [b_reg_kaluga],
    [b_reg_kostroma],
    [b_reg_kursk],
    [b_reg_lipetsk],
    [b_reg_msk_act],
    [b_reg_msk_inf],
    [b_reg_orel],
    [b_reg_ryazan],
    [b_reg_smolensk],
    [b_reg_tambov],
    [b_reg_tver],
    [b_reg_tula],
    [b_reg_yaroslavl],
    [b_reg_central_reg_other],
    [b_fed_dist_pick_other],
    [b_back_to_start],
]


# Settings - Yuzhniy Fed Dist - Regions
b_reg_adygeya = '–ê–¥—ã–≥–µ—è'
b_reg_astrahan = '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–∞—è –æ–±–ª.'
b_reg_volgograd = '–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª.'
b_reg_krasnodar = '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π'
b_reg_krym = '–ö—Ä—ã–º'
b_reg_rostov = '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª.'
b_reg_yuzhniy_reg_other = '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –Æ–§–û'
keyboard_yuzhniy_reg_choice = [
    [b_reg_adygeya],
    [b_reg_astrahan],
    [b_reg_volgograd],
    [b_reg_krasnodar],
    [b_reg_krym],
    [b_reg_rostov],
    [b_reg_yuzhniy_reg_other],
    [b_fed_dist_pick_other],
    [b_back_to_start],
]


# Settings - Federal Districts
b_fed_dist_dal_vos = '–î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π –§–û'
b_fed_dist_privolz = '–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π –§–û'
b_fed_dist_sev_kaz = '–°–µ–≤–µ—Ä–æ-–ö–∞–≤–∫–∞–∑—Å–∫–∏–π –§–û'
b_fed_dist_sev_zap = '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π –§–û'
b_fed_dist_sibiria = '–°–∏–±–∏—Ä—Å–∫–∏–π –§–û'
b_fed_dist_uralsky = '–£—Ä–∞–ª—å—Å–∫–∏–π –§–û'
b_fed_dist_central = '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –§–û'
b_fed_dist_yuzhniy = '–Æ–∂–Ω—ã–π –§–û'
b_fed_dist_other_r = '–ü—Ä–æ—á–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ –†–§'

keyboard_fed_dist_set = [  # import
    [b_fed_dist_dal_vos],
    [b_fed_dist_privolz],
    [b_fed_dist_sev_kaz],
    [b_fed_dist_sev_zap],
    [b_fed_dist_sibiria],
    [b_fed_dist_uralsky],
    [b_fed_dist_central],
    [b_fed_dist_yuzhniy],
    [b_fed_dist_other_r],
    [b_back_to_start],
]


dict_of_fed_dist = {  # import
    b_fed_dist_dal_vos: keyboard_dal_vost_reg_choice,
    b_fed_dist_privolz: keyboard_privolz_reg_choice,
    b_fed_dist_sev_kaz: keyboard_sev_kav_reg_choice,
    b_fed_dist_sev_zap: keyboard_sev_zap_reg_choice,
    b_fed_dist_sibiria: keyboard_sibiria_reg_choice,
    b_fed_dist_uralsky: keyboard_urals_reg_choice,
    b_fed_dist_central: keyboard_central_reg_choice,
    b_fed_dist_yuzhniy: keyboard_yuzhniy_reg_choice,
}

full_list_of_regions = (
    keyboard_dal_vost_reg_choice[:-1]
    + keyboard_privolz_reg_choice[:-1]
    + keyboard_sev_kav_reg_choice[:-1]
    + keyboard_sev_zap_reg_choice[:-1]
    + keyboard_sibiria_reg_choice[:-1]
    + keyboard_urals_reg_choice[:-1]
    + keyboard_central_reg_choice[:-1]
    + keyboard_yuzhniy_reg_choice[:-1]
    + [[b_fed_dist_other_r]]
)  # noqa ‚Äì for strange pycharm indent warning

full_dict_of_regions = {word[0] for word in full_list_of_regions}
